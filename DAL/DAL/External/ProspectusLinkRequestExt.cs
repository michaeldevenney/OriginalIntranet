using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DALRemote
{
	/// <summary>
	/// Strongly-typed collection for the ProspectusLinkRequestExt class.
	/// </summary>
    [Serializable]
	public partial class ProspectusLinkRequestExtCollection : ActiveList<ProspectusLinkRequestExt, ProspectusLinkRequestExtCollection>
	{	   
		public ProspectusLinkRequestExtCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ProspectusLinkRequestExtCollection</returns>
		public ProspectusLinkRequestExtCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ProspectusLinkRequestExt o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ProspectusLinkRequestExt table.
	/// </summary>
	[Serializable]
	public partial class ProspectusLinkRequestExt : ActiveRecord<ProspectusLinkRequestExt>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ProspectusLinkRequestExt()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ProspectusLinkRequestExt(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ProspectusLinkRequestExt(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ProspectusLinkRequestExt(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ProspectusLinkRequestExt", TableType.Table, DataService.GetInstance("External"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarExternalID = new TableSchema.TableColumn(schema);
				colvarExternalID.ColumnName = "ExternalID";
				colvarExternalID.DataType = DbType.Int32;
				colvarExternalID.MaxLength = 0;
				colvarExternalID.AutoIncrement = false;
				colvarExternalID.IsNullable = true;
				colvarExternalID.IsPrimaryKey = false;
				colvarExternalID.IsForeignKey = false;
				colvarExternalID.IsReadOnly = false;
				colvarExternalID.DefaultSetting = @"";
				colvarExternalID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExternalID);
				
				TableSchema.TableColumn colvarFacility = new TableSchema.TableColumn(schema);
				colvarFacility.ColumnName = "Facility";
				colvarFacility.DataType = DbType.AnsiString;
				colvarFacility.MaxLength = 100;
				colvarFacility.AutoIncrement = false;
				colvarFacility.IsNullable = true;
				colvarFacility.IsPrimaryKey = false;
				colvarFacility.IsForeignKey = false;
				colvarFacility.IsReadOnly = false;
				colvarFacility.DefaultSetting = @"";
				colvarFacility.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFacility);
				
				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.AnsiString;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = true;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);
				
				TableSchema.TableColumn colvarState = new TableSchema.TableColumn(schema);
				colvarState.ColumnName = "State";
				colvarState.DataType = DbType.AnsiString;
				colvarState.MaxLength = 2;
				colvarState.AutoIncrement = false;
				colvarState.IsNullable = true;
				colvarState.IsPrimaryKey = false;
				colvarState.IsForeignKey = false;
				colvarState.IsReadOnly = false;
				colvarState.DefaultSetting = @"";
				colvarState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarState);
				
				TableSchema.TableColumn colvarCountry = new TableSchema.TableColumn(schema);
				colvarCountry.ColumnName = "Country";
				colvarCountry.DataType = DbType.AnsiString;
				colvarCountry.MaxLength = 50;
				colvarCountry.AutoIncrement = false;
				colvarCountry.IsNullable = true;
				colvarCountry.IsPrimaryKey = false;
				colvarCountry.IsForeignKey = false;
				colvarCountry.IsReadOnly = false;
				colvarCountry.DefaultSetting = @"";
				colvarCountry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountry);
				
				TableSchema.TableColumn colvarSalesperson = new TableSchema.TableColumn(schema);
				colvarSalesperson.ColumnName = "Salesperson";
				colvarSalesperson.DataType = DbType.AnsiString;
				colvarSalesperson.MaxLength = 20;
				colvarSalesperson.AutoIncrement = false;
				colvarSalesperson.IsNullable = true;
				colvarSalesperson.IsPrimaryKey = false;
				colvarSalesperson.IsForeignKey = false;
				colvarSalesperson.IsReadOnly = false;
				colvarSalesperson.DefaultSetting = @"";
				colvarSalesperson.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesperson);
				
				TableSchema.TableColumn colvarSalespersonID = new TableSchema.TableColumn(schema);
				colvarSalespersonID.ColumnName = "SalespersonID";
				colvarSalespersonID.DataType = DbType.Int32;
				colvarSalespersonID.MaxLength = 0;
				colvarSalespersonID.AutoIncrement = false;
				colvarSalespersonID.IsNullable = true;
				colvarSalespersonID.IsPrimaryKey = false;
				colvarSalespersonID.IsForeignKey = false;
				colvarSalespersonID.IsReadOnly = false;
				colvarSalespersonID.DefaultSetting = @"";
				colvarSalespersonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalespersonID);
				
				TableSchema.TableColumn colvarContactName = new TableSchema.TableColumn(schema);
				colvarContactName.ColumnName = "ContactName";
				colvarContactName.DataType = DbType.AnsiString;
				colvarContactName.MaxLength = 50;
				colvarContactName.AutoIncrement = false;
				colvarContactName.IsNullable = true;
				colvarContactName.IsPrimaryKey = false;
				colvarContactName.IsForeignKey = false;
				colvarContactName.IsReadOnly = false;
				colvarContactName.DefaultSetting = @"";
				colvarContactName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactName);
				
				TableSchema.TableColumn colvarContactEmail = new TableSchema.TableColumn(schema);
				colvarContactEmail.ColumnName = "ContactEmail";
				colvarContactEmail.DataType = DbType.AnsiString;
				colvarContactEmail.MaxLength = 50;
				colvarContactEmail.AutoIncrement = false;
				colvarContactEmail.IsNullable = true;
				colvarContactEmail.IsPrimaryKey = false;
				colvarContactEmail.IsForeignKey = false;
				colvarContactEmail.IsReadOnly = false;
				colvarContactEmail.DefaultSetting = @"";
				colvarContactEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactEmail);
				
				TableSchema.TableColumn colvarSynched = new TableSchema.TableColumn(schema);
				colvarSynched.ColumnName = "Synched";
				colvarSynched.DataType = DbType.Boolean;
				colvarSynched.MaxLength = 0;
				colvarSynched.AutoIncrement = false;
				colvarSynched.IsNullable = true;
				colvarSynched.IsPrimaryKey = false;
				colvarSynched.IsForeignKey = false;
				colvarSynched.IsReadOnly = false;
				
						colvarSynched.DefaultSetting = @"((0))";
				colvarSynched.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSynched);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["External"].AddSchema("ProspectusLinkRequestExt",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("ExternalID")]
		[Bindable(true)]
		public int? ExternalID 
		{
			get { return GetColumnValue<int?>(Columns.ExternalID); }
			set { SetColumnValue(Columns.ExternalID, value); }
		}
		  
		[XmlAttribute("Facility")]
		[Bindable(true)]
		public string Facility 
		{
			get { return GetColumnValue<string>(Columns.Facility); }
			set { SetColumnValue(Columns.Facility, value); }
		}
		  
		[XmlAttribute("City")]
		[Bindable(true)]
		public string City 
		{
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		  
		[XmlAttribute("State")]
		[Bindable(true)]
		public string State 
		{
			get { return GetColumnValue<string>(Columns.State); }
			set { SetColumnValue(Columns.State, value); }
		}
		  
		[XmlAttribute("Country")]
		[Bindable(true)]
		public string Country 
		{
			get { return GetColumnValue<string>(Columns.Country); }
			set { SetColumnValue(Columns.Country, value); }
		}
		  
		[XmlAttribute("Salesperson")]
		[Bindable(true)]
		public string Salesperson 
		{
			get { return GetColumnValue<string>(Columns.Salesperson); }
			set { SetColumnValue(Columns.Salesperson, value); }
		}
		  
		[XmlAttribute("SalespersonID")]
		[Bindable(true)]
		public int? SalespersonID 
		{
			get { return GetColumnValue<int?>(Columns.SalespersonID); }
			set { SetColumnValue(Columns.SalespersonID, value); }
		}
		  
		[XmlAttribute("ContactName")]
		[Bindable(true)]
		public string ContactName 
		{
			get { return GetColumnValue<string>(Columns.ContactName); }
			set { SetColumnValue(Columns.ContactName, value); }
		}
		  
		[XmlAttribute("ContactEmail")]
		[Bindable(true)]
		public string ContactEmail 
		{
			get { return GetColumnValue<string>(Columns.ContactEmail); }
			set { SetColumnValue(Columns.ContactEmail, value); }
		}
		  
		[XmlAttribute("Synched")]
		[Bindable(true)]
		public bool? Synched 
		{
			get { return GetColumnValue<bool?>(Columns.Synched); }
			set { SetColumnValue(Columns.Synched, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varExternalID,string varFacility,string varCity,string varState,string varCountry,string varSalesperson,int? varSalespersonID,string varContactName,string varContactEmail,bool? varSynched)
		{
			ProspectusLinkRequestExt item = new ProspectusLinkRequestExt();
			
			item.ExternalID = varExternalID;
			
			item.Facility = varFacility;
			
			item.City = varCity;
			
			item.State = varState;
			
			item.Country = varCountry;
			
			item.Salesperson = varSalesperson;
			
			item.SalespersonID = varSalespersonID;
			
			item.ContactName = varContactName;
			
			item.ContactEmail = varContactEmail;
			
			item.Synched = varSynched;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varExternalID,string varFacility,string varCity,string varState,string varCountry,string varSalesperson,int? varSalespersonID,string varContactName,string varContactEmail,bool? varSynched)
		{
			ProspectusLinkRequestExt item = new ProspectusLinkRequestExt();
			
				item.Id = varId;
			
				item.ExternalID = varExternalID;
			
				item.Facility = varFacility;
			
				item.City = varCity;
			
				item.State = varState;
			
				item.Country = varCountry;
			
				item.Salesperson = varSalesperson;
			
				item.SalespersonID = varSalespersonID;
			
				item.ContactName = varContactName;
			
				item.ContactEmail = varContactEmail;
			
				item.Synched = varSynched;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ExternalIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FacilityColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CityColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn StateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SalespersonColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SalespersonIDColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactNameColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactEmailColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn SynchedColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string ExternalID = @"ExternalID";
			 public static string Facility = @"Facility";
			 public static string City = @"City";
			 public static string State = @"State";
			 public static string Country = @"Country";
			 public static string Salesperson = @"Salesperson";
			 public static string SalespersonID = @"SalespersonID";
			 public static string ContactName = @"ContactName";
			 public static string ContactEmail = @"ContactEmail";
			 public static string Synched = @"Synched";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
