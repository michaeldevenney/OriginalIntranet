using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DALRemote
{
	/// <summary>
	/// Strongly-typed collection for the ProspectRoomExt class.
	/// </summary>
    [Serializable]
	public partial class ProspectRoomExtCollection : ActiveList<ProspectRoomExt, ProspectRoomExtCollection>
	{	   
		public ProspectRoomExtCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ProspectRoomExtCollection</returns>
		public ProspectRoomExtCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ProspectRoomExt o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ProspectRoomExt table.
	/// </summary>
	[Serializable]
	public partial class ProspectRoomExt : ActiveRecord<ProspectRoomExt>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ProspectRoomExt()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ProspectRoomExt(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ProspectRoomExt(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ProspectRoomExt(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ProspectRoomExt", TableType.Table, DataService.GetInstance("External"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarExternalID = new TableSchema.TableColumn(schema);
				colvarExternalID.ColumnName = "ExternalID";
				colvarExternalID.DataType = DbType.Int32;
				colvarExternalID.MaxLength = 0;
				colvarExternalID.AutoIncrement = false;
				colvarExternalID.IsNullable = true;
				colvarExternalID.IsPrimaryKey = false;
				colvarExternalID.IsForeignKey = false;
				colvarExternalID.IsReadOnly = false;
				colvarExternalID.DefaultSetting = @"";
				colvarExternalID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExternalID);
				
				TableSchema.TableColumn colvarProspectusID = new TableSchema.TableColumn(schema);
				colvarProspectusID.ColumnName = "ProspectusID";
				colvarProspectusID.DataType = DbType.Int32;
				colvarProspectusID.MaxLength = 0;
				colvarProspectusID.AutoIncrement = false;
				colvarProspectusID.IsNullable = false;
				colvarProspectusID.IsPrimaryKey = false;
				colvarProspectusID.IsForeignKey = false;
				colvarProspectusID.IsReadOnly = false;
				colvarProspectusID.DefaultSetting = @"";
				colvarProspectusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProspectusID);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarVendorMachine = new TableSchema.TableColumn(schema);
				colvarVendorMachine.ColumnName = "VendorMachine";
				colvarVendorMachine.DataType = DbType.AnsiString;
				colvarVendorMachine.MaxLength = 50;
				colvarVendorMachine.AutoIncrement = false;
				colvarVendorMachine.IsNullable = true;
				colvarVendorMachine.IsPrimaryKey = false;
				colvarVendorMachine.IsForeignKey = false;
				colvarVendorMachine.IsReadOnly = false;
				colvarVendorMachine.DefaultSetting = @"";
				colvarVendorMachine.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVendorMachine);
				
				TableSchema.TableColumn colvarLowEnergy = new TableSchema.TableColumn(schema);
				colvarLowEnergy.ColumnName = "LowEnergy";
				colvarLowEnergy.DataType = DbType.AnsiString;
				colvarLowEnergy.MaxLength = 10;
				colvarLowEnergy.AutoIncrement = false;
				colvarLowEnergy.IsNullable = true;
				colvarLowEnergy.IsPrimaryKey = false;
				colvarLowEnergy.IsForeignKey = false;
				colvarLowEnergy.IsReadOnly = false;
				colvarLowEnergy.DefaultSetting = @"";
				colvarLowEnergy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLowEnergy);
				
				TableSchema.TableColumn colvarHighEnergy = new TableSchema.TableColumn(schema);
				colvarHighEnergy.ColumnName = "HighEnergy";
				colvarHighEnergy.DataType = DbType.AnsiString;
				colvarHighEnergy.MaxLength = 10;
				colvarHighEnergy.AutoIncrement = false;
				colvarHighEnergy.IsNullable = true;
				colvarHighEnergy.IsPrimaryKey = false;
				colvarHighEnergy.IsForeignKey = false;
				colvarHighEnergy.IsReadOnly = false;
				colvarHighEnergy.DefaultSetting = @"";
				colvarHighEnergy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHighEnergy);
				
				TableSchema.TableColumn colvarRoomType = new TableSchema.TableColumn(schema);
				colvarRoomType.ColumnName = "RoomType";
				colvarRoomType.DataType = DbType.AnsiString;
				colvarRoomType.MaxLength = 50;
				colvarRoomType.AutoIncrement = false;
				colvarRoomType.IsNullable = true;
				colvarRoomType.IsPrimaryKey = false;
				colvarRoomType.IsForeignKey = false;
				colvarRoomType.IsReadOnly = false;
				colvarRoomType.DefaultSetting = @"";
				colvarRoomType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoomType);
				
				TableSchema.TableColumn colvarPatientsPerDay = new TableSchema.TableColumn(schema);
				colvarPatientsPerDay.ColumnName = "PatientsPerDay";
				colvarPatientsPerDay.DataType = DbType.AnsiString;
				colvarPatientsPerDay.MaxLength = 3;
				colvarPatientsPerDay.AutoIncrement = false;
				colvarPatientsPerDay.IsNullable = true;
				colvarPatientsPerDay.IsPrimaryKey = false;
				colvarPatientsPerDay.IsForeignKey = false;
				colvarPatientsPerDay.IsReadOnly = false;
				colvarPatientsPerDay.DefaultSetting = @"";
				colvarPatientsPerDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientsPerDay);
				
				TableSchema.TableColumn colvarConventionalPct = new TableSchema.TableColumn(schema);
				colvarConventionalPct.ColumnName = "ConventionalPct";
				colvarConventionalPct.DataType = DbType.Int32;
				colvarConventionalPct.MaxLength = 0;
				colvarConventionalPct.AutoIncrement = false;
				colvarConventionalPct.IsNullable = true;
				colvarConventionalPct.IsPrimaryKey = false;
				colvarConventionalPct.IsForeignKey = false;
				colvarConventionalPct.IsReadOnly = false;
				
						colvarConventionalPct.DefaultSetting = @"((0))";
				colvarConventionalPct.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConventionalPct);
				
				TableSchema.TableColumn colvarConventionalPctLE = new TableSchema.TableColumn(schema);
				colvarConventionalPctLE.ColumnName = "ConventionalPctLE";
				colvarConventionalPctLE.DataType = DbType.Int32;
				colvarConventionalPctLE.MaxLength = 0;
				colvarConventionalPctLE.AutoIncrement = false;
				colvarConventionalPctLE.IsNullable = true;
				colvarConventionalPctLE.IsPrimaryKey = false;
				colvarConventionalPctLE.IsForeignKey = false;
				colvarConventionalPctLE.IsReadOnly = false;
				
						colvarConventionalPctLE.DefaultSetting = @"((0))";
				colvarConventionalPctLE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConventionalPctLE);
				
				TableSchema.TableColumn colvarConventionalPctHE = new TableSchema.TableColumn(schema);
				colvarConventionalPctHE.ColumnName = "ConventionalPctHE";
				colvarConventionalPctHE.DataType = DbType.Int32;
				colvarConventionalPctHE.MaxLength = 0;
				colvarConventionalPctHE.AutoIncrement = false;
				colvarConventionalPctHE.IsNullable = true;
				colvarConventionalPctHE.IsPrimaryKey = false;
				colvarConventionalPctHE.IsForeignKey = false;
				colvarConventionalPctHE.IsReadOnly = false;
				
						colvarConventionalPctHE.DefaultSetting = @"((0))";
				colvarConventionalPctHE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConventionalPctHE);
				
				TableSchema.TableColumn colvarTBIPct = new TableSchema.TableColumn(schema);
				colvarTBIPct.ColumnName = "TBIPct";
				colvarTBIPct.DataType = DbType.Int32;
				colvarTBIPct.MaxLength = 0;
				colvarTBIPct.AutoIncrement = false;
				colvarTBIPct.IsNullable = true;
				colvarTBIPct.IsPrimaryKey = false;
				colvarTBIPct.IsForeignKey = false;
				colvarTBIPct.IsReadOnly = false;
				
						colvarTBIPct.DefaultSetting = @"((0))";
				colvarTBIPct.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTBIPct);
				
				TableSchema.TableColumn colvarTBIPctLE = new TableSchema.TableColumn(schema);
				colvarTBIPctLE.ColumnName = "TBIPctLE";
				colvarTBIPctLE.DataType = DbType.Int32;
				colvarTBIPctLE.MaxLength = 0;
				colvarTBIPctLE.AutoIncrement = false;
				colvarTBIPctLE.IsNullable = true;
				colvarTBIPctLE.IsPrimaryKey = false;
				colvarTBIPctLE.IsForeignKey = false;
				colvarTBIPctLE.IsReadOnly = false;
				
						colvarTBIPctLE.DefaultSetting = @"((0))";
				colvarTBIPctLE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTBIPctLE);
				
				TableSchema.TableColumn colvarTBIPctHE = new TableSchema.TableColumn(schema);
				colvarTBIPctHE.ColumnName = "TBIPctHE";
				colvarTBIPctHE.DataType = DbType.Int32;
				colvarTBIPctHE.MaxLength = 0;
				colvarTBIPctHE.AutoIncrement = false;
				colvarTBIPctHE.IsNullable = true;
				colvarTBIPctHE.IsPrimaryKey = false;
				colvarTBIPctHE.IsForeignKey = false;
				colvarTBIPctHE.IsReadOnly = false;
				
						colvarTBIPctHE.DefaultSetting = @"((0))";
				colvarTBIPctHE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTBIPctHE);
				
				TableSchema.TableColumn colvarIMRTPct = new TableSchema.TableColumn(schema);
				colvarIMRTPct.ColumnName = "IMRTPct";
				colvarIMRTPct.DataType = DbType.Int32;
				colvarIMRTPct.MaxLength = 0;
				colvarIMRTPct.AutoIncrement = false;
				colvarIMRTPct.IsNullable = true;
				colvarIMRTPct.IsPrimaryKey = false;
				colvarIMRTPct.IsForeignKey = false;
				colvarIMRTPct.IsReadOnly = false;
				colvarIMRTPct.DefaultSetting = @"";
				colvarIMRTPct.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIMRTPct);
				
				TableSchema.TableColumn colvarIMRTPctLE = new TableSchema.TableColumn(schema);
				colvarIMRTPctLE.ColumnName = "IMRTPctLE";
				colvarIMRTPctLE.DataType = DbType.Int32;
				colvarIMRTPctLE.MaxLength = 0;
				colvarIMRTPctLE.AutoIncrement = false;
				colvarIMRTPctLE.IsNullable = true;
				colvarIMRTPctLE.IsPrimaryKey = false;
				colvarIMRTPctLE.IsForeignKey = false;
				colvarIMRTPctLE.IsReadOnly = false;
				colvarIMRTPctLE.DefaultSetting = @"";
				colvarIMRTPctLE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIMRTPctLE);
				
				TableSchema.TableColumn colvarIMRTPctHE = new TableSchema.TableColumn(schema);
				colvarIMRTPctHE.ColumnName = "IMRTPctHE";
				colvarIMRTPctHE.DataType = DbType.Int32;
				colvarIMRTPctHE.MaxLength = 0;
				colvarIMRTPctHE.AutoIncrement = false;
				colvarIMRTPctHE.IsNullable = true;
				colvarIMRTPctHE.IsPrimaryKey = false;
				colvarIMRTPctHE.IsForeignKey = false;
				colvarIMRTPctHE.IsReadOnly = false;
				colvarIMRTPctHE.DefaultSetting = @"";
				colvarIMRTPctHE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIMRTPctHE);
				
				TableSchema.TableColumn colvarRadioPct = new TableSchema.TableColumn(schema);
				colvarRadioPct.ColumnName = "RadioPct";
				colvarRadioPct.DataType = DbType.Int32;
				colvarRadioPct.MaxLength = 0;
				colvarRadioPct.AutoIncrement = false;
				colvarRadioPct.IsNullable = true;
				colvarRadioPct.IsPrimaryKey = false;
				colvarRadioPct.IsForeignKey = false;
				colvarRadioPct.IsReadOnly = false;
				colvarRadioPct.DefaultSetting = @"";
				colvarRadioPct.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRadioPct);
				
				TableSchema.TableColumn colvarRadioPctLE = new TableSchema.TableColumn(schema);
				colvarRadioPctLE.ColumnName = "RadioPctLE";
				colvarRadioPctLE.DataType = DbType.Int32;
				colvarRadioPctLE.MaxLength = 0;
				colvarRadioPctLE.AutoIncrement = false;
				colvarRadioPctLE.IsNullable = true;
				colvarRadioPctLE.IsPrimaryKey = false;
				colvarRadioPctLE.IsForeignKey = false;
				colvarRadioPctLE.IsReadOnly = false;
				colvarRadioPctLE.DefaultSetting = @"";
				colvarRadioPctLE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRadioPctLE);
				
				TableSchema.TableColumn colvarRadioPctHE = new TableSchema.TableColumn(schema);
				colvarRadioPctHE.ColumnName = "RadioPctHE";
				colvarRadioPctHE.DataType = DbType.Int32;
				colvarRadioPctHE.MaxLength = 0;
				colvarRadioPctHE.AutoIncrement = false;
				colvarRadioPctHE.IsNullable = true;
				colvarRadioPctHE.IsPrimaryKey = false;
				colvarRadioPctHE.IsForeignKey = false;
				colvarRadioPctHE.IsReadOnly = false;
				colvarRadioPctHE.DefaultSetting = @"";
				colvarRadioPctHE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRadioPctHE);
				
				TableSchema.TableColumn colvarOccupancyWall1 = new TableSchema.TableColumn(schema);
				colvarOccupancyWall1.ColumnName = "OccupancyWall1";
				colvarOccupancyWall1.DataType = DbType.AnsiString;
				colvarOccupancyWall1.MaxLength = 5;
				colvarOccupancyWall1.AutoIncrement = false;
				colvarOccupancyWall1.IsNullable = true;
				colvarOccupancyWall1.IsPrimaryKey = false;
				colvarOccupancyWall1.IsForeignKey = false;
				colvarOccupancyWall1.IsReadOnly = false;
				colvarOccupancyWall1.DefaultSetting = @"";
				colvarOccupancyWall1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOccupancyWall1);
				
				TableSchema.TableColumn colvarOccupancyWall2 = new TableSchema.TableColumn(schema);
				colvarOccupancyWall2.ColumnName = "OccupancyWall2";
				colvarOccupancyWall2.DataType = DbType.AnsiString;
				colvarOccupancyWall2.MaxLength = 5;
				colvarOccupancyWall2.AutoIncrement = false;
				colvarOccupancyWall2.IsNullable = true;
				colvarOccupancyWall2.IsPrimaryKey = false;
				colvarOccupancyWall2.IsForeignKey = false;
				colvarOccupancyWall2.IsReadOnly = false;
				colvarOccupancyWall2.DefaultSetting = @"";
				colvarOccupancyWall2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOccupancyWall2);
				
				TableSchema.TableColumn colvarOccupancyWall3 = new TableSchema.TableColumn(schema);
				colvarOccupancyWall3.ColumnName = "OccupancyWall3";
				colvarOccupancyWall3.DataType = DbType.AnsiString;
				colvarOccupancyWall3.MaxLength = 5;
				colvarOccupancyWall3.AutoIncrement = false;
				colvarOccupancyWall3.IsNullable = true;
				colvarOccupancyWall3.IsPrimaryKey = false;
				colvarOccupancyWall3.IsForeignKey = false;
				colvarOccupancyWall3.IsReadOnly = false;
				colvarOccupancyWall3.DefaultSetting = @"";
				colvarOccupancyWall3.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOccupancyWall3);
				
				TableSchema.TableColumn colvarOccupancyWall4 = new TableSchema.TableColumn(schema);
				colvarOccupancyWall4.ColumnName = "OccupancyWall4";
				colvarOccupancyWall4.DataType = DbType.AnsiString;
				colvarOccupancyWall4.MaxLength = 5;
				colvarOccupancyWall4.AutoIncrement = false;
				colvarOccupancyWall4.IsNullable = true;
				colvarOccupancyWall4.IsPrimaryKey = false;
				colvarOccupancyWall4.IsForeignKey = false;
				colvarOccupancyWall4.IsReadOnly = false;
				colvarOccupancyWall4.DefaultSetting = @"";
				colvarOccupancyWall4.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOccupancyWall4);
				
				TableSchema.TableColumn colvarOccupancyFloor1 = new TableSchema.TableColumn(schema);
				colvarOccupancyFloor1.ColumnName = "OccupancyFloor1";
				colvarOccupancyFloor1.DataType = DbType.AnsiString;
				colvarOccupancyFloor1.MaxLength = 5;
				colvarOccupancyFloor1.AutoIncrement = false;
				colvarOccupancyFloor1.IsNullable = true;
				colvarOccupancyFloor1.IsPrimaryKey = false;
				colvarOccupancyFloor1.IsForeignKey = false;
				colvarOccupancyFloor1.IsReadOnly = false;
				colvarOccupancyFloor1.DefaultSetting = @"";
				colvarOccupancyFloor1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOccupancyFloor1);
				
				TableSchema.TableColumn colvarOccupancyFloor2 = new TableSchema.TableColumn(schema);
				colvarOccupancyFloor2.ColumnName = "OccupancyFloor2";
				colvarOccupancyFloor2.DataType = DbType.AnsiString;
				colvarOccupancyFloor2.MaxLength = 5;
				colvarOccupancyFloor2.AutoIncrement = false;
				colvarOccupancyFloor2.IsNullable = true;
				colvarOccupancyFloor2.IsPrimaryKey = false;
				colvarOccupancyFloor2.IsForeignKey = false;
				colvarOccupancyFloor2.IsReadOnly = false;
				colvarOccupancyFloor2.DefaultSetting = @"";
				colvarOccupancyFloor2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOccupancyFloor2);
				
				TableSchema.TableColumn colvarOccupancyFloor3 = new TableSchema.TableColumn(schema);
				colvarOccupancyFloor3.ColumnName = "OccupancyFloor3";
				colvarOccupancyFloor3.DataType = DbType.AnsiString;
				colvarOccupancyFloor3.MaxLength = 5;
				colvarOccupancyFloor3.AutoIncrement = false;
				colvarOccupancyFloor3.IsNullable = true;
				colvarOccupancyFloor3.IsPrimaryKey = false;
				colvarOccupancyFloor3.IsForeignKey = false;
				colvarOccupancyFloor3.IsReadOnly = false;
				colvarOccupancyFloor3.DefaultSetting = @"";
				colvarOccupancyFloor3.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOccupancyFloor3);
				
				TableSchema.TableColumn colvarOccupancyFloor4 = new TableSchema.TableColumn(schema);
				colvarOccupancyFloor4.ColumnName = "OccupancyFloor4";
				colvarOccupancyFloor4.DataType = DbType.AnsiString;
				colvarOccupancyFloor4.MaxLength = 5;
				colvarOccupancyFloor4.AutoIncrement = false;
				colvarOccupancyFloor4.IsNullable = true;
				colvarOccupancyFloor4.IsPrimaryKey = false;
				colvarOccupancyFloor4.IsForeignKey = false;
				colvarOccupancyFloor4.IsReadOnly = false;
				colvarOccupancyFloor4.DefaultSetting = @"";
				colvarOccupancyFloor4.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOccupancyFloor4);
				
				TableSchema.TableColumn colvarRoomLocation = new TableSchema.TableColumn(schema);
				colvarRoomLocation.ColumnName = "RoomLocation";
				colvarRoomLocation.DataType = DbType.AnsiString;
				colvarRoomLocation.MaxLength = 25;
				colvarRoomLocation.AutoIncrement = false;
				colvarRoomLocation.IsNullable = true;
				colvarRoomLocation.IsPrimaryKey = false;
				colvarRoomLocation.IsForeignKey = false;
				colvarRoomLocation.IsReadOnly = false;
				colvarRoomLocation.DefaultSetting = @"";
				colvarRoomLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoomLocation);
				
				TableSchema.TableColumn colvarBuildingFloor = new TableSchema.TableColumn(schema);
				colvarBuildingFloor.ColumnName = "BuildingFloor";
				colvarBuildingFloor.DataType = DbType.AnsiString;
				colvarBuildingFloor.MaxLength = 25;
				colvarBuildingFloor.AutoIncrement = false;
				colvarBuildingFloor.IsNullable = true;
				colvarBuildingFloor.IsPrimaryKey = false;
				colvarBuildingFloor.IsForeignKey = false;
				colvarBuildingFloor.IsReadOnly = false;
				colvarBuildingFloor.DefaultSetting = @"";
				colvarBuildingFloor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBuildingFloor);
				
				TableSchema.TableColumn colvarEntryType = new TableSchema.TableColumn(schema);
				colvarEntryType.ColumnName = "EntryType";
				colvarEntryType.DataType = DbType.AnsiString;
				colvarEntryType.MaxLength = 25;
				colvarEntryType.AutoIncrement = false;
				colvarEntryType.IsNullable = true;
				colvarEntryType.IsPrimaryKey = false;
				colvarEntryType.IsForeignKey = false;
				colvarEntryType.IsReadOnly = false;
				colvarEntryType.DefaultSetting = @"";
				colvarEntryType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEntryType);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["External"].AddSchema("ProspectRoomExt",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("ExternalID")]
		[Bindable(true)]
		public int? ExternalID 
		{
			get { return GetColumnValue<int?>(Columns.ExternalID); }
			set { SetColumnValue(Columns.ExternalID, value); }
		}
		  
		[XmlAttribute("ProspectusID")]
		[Bindable(true)]
		public int ProspectusID 
		{
			get { return GetColumnValue<int>(Columns.ProspectusID); }
			set { SetColumnValue(Columns.ProspectusID, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("VendorMachine")]
		[Bindable(true)]
		public string VendorMachine 
		{
			get { return GetColumnValue<string>(Columns.VendorMachine); }
			set { SetColumnValue(Columns.VendorMachine, value); }
		}
		  
		[XmlAttribute("LowEnergy")]
		[Bindable(true)]
		public string LowEnergy 
		{
			get { return GetColumnValue<string>(Columns.LowEnergy); }
			set { SetColumnValue(Columns.LowEnergy, value); }
		}
		  
		[XmlAttribute("HighEnergy")]
		[Bindable(true)]
		public string HighEnergy 
		{
			get { return GetColumnValue<string>(Columns.HighEnergy); }
			set { SetColumnValue(Columns.HighEnergy, value); }
		}
		  
		[XmlAttribute("RoomType")]
		[Bindable(true)]
		public string RoomType 
		{
			get { return GetColumnValue<string>(Columns.RoomType); }
			set { SetColumnValue(Columns.RoomType, value); }
		}
		  
		[XmlAttribute("PatientsPerDay")]
		[Bindable(true)]
		public string PatientsPerDay 
		{
			get { return GetColumnValue<string>(Columns.PatientsPerDay); }
			set { SetColumnValue(Columns.PatientsPerDay, value); }
		}
		  
		[XmlAttribute("ConventionalPct")]
		[Bindable(true)]
		public int? ConventionalPct 
		{
			get { return GetColumnValue<int?>(Columns.ConventionalPct); }
			set { SetColumnValue(Columns.ConventionalPct, value); }
		}
		  
		[XmlAttribute("ConventionalPctLE")]
		[Bindable(true)]
		public int? ConventionalPctLE 
		{
			get { return GetColumnValue<int?>(Columns.ConventionalPctLE); }
			set { SetColumnValue(Columns.ConventionalPctLE, value); }
		}
		  
		[XmlAttribute("ConventionalPctHE")]
		[Bindable(true)]
		public int? ConventionalPctHE 
		{
			get { return GetColumnValue<int?>(Columns.ConventionalPctHE); }
			set { SetColumnValue(Columns.ConventionalPctHE, value); }
		}
		  
		[XmlAttribute("TBIPct")]
		[Bindable(true)]
		public int? TBIPct 
		{
			get { return GetColumnValue<int?>(Columns.TBIPct); }
			set { SetColumnValue(Columns.TBIPct, value); }
		}
		  
		[XmlAttribute("TBIPctLE")]
		[Bindable(true)]
		public int? TBIPctLE 
		{
			get { return GetColumnValue<int?>(Columns.TBIPctLE); }
			set { SetColumnValue(Columns.TBIPctLE, value); }
		}
		  
		[XmlAttribute("TBIPctHE")]
		[Bindable(true)]
		public int? TBIPctHE 
		{
			get { return GetColumnValue<int?>(Columns.TBIPctHE); }
			set { SetColumnValue(Columns.TBIPctHE, value); }
		}
		  
		[XmlAttribute("IMRTPct")]
		[Bindable(true)]
		public int? IMRTPct 
		{
			get { return GetColumnValue<int?>(Columns.IMRTPct); }
			set { SetColumnValue(Columns.IMRTPct, value); }
		}
		  
		[XmlAttribute("IMRTPctLE")]
		[Bindable(true)]
		public int? IMRTPctLE 
		{
			get { return GetColumnValue<int?>(Columns.IMRTPctLE); }
			set { SetColumnValue(Columns.IMRTPctLE, value); }
		}
		  
		[XmlAttribute("IMRTPctHE")]
		[Bindable(true)]
		public int? IMRTPctHE 
		{
			get { return GetColumnValue<int?>(Columns.IMRTPctHE); }
			set { SetColumnValue(Columns.IMRTPctHE, value); }
		}
		  
		[XmlAttribute("RadioPct")]
		[Bindable(true)]
		public int? RadioPct 
		{
			get { return GetColumnValue<int?>(Columns.RadioPct); }
			set { SetColumnValue(Columns.RadioPct, value); }
		}
		  
		[XmlAttribute("RadioPctLE")]
		[Bindable(true)]
		public int? RadioPctLE 
		{
			get { return GetColumnValue<int?>(Columns.RadioPctLE); }
			set { SetColumnValue(Columns.RadioPctLE, value); }
		}
		  
		[XmlAttribute("RadioPctHE")]
		[Bindable(true)]
		public int? RadioPctHE 
		{
			get { return GetColumnValue<int?>(Columns.RadioPctHE); }
			set { SetColumnValue(Columns.RadioPctHE, value); }
		}
		  
		[XmlAttribute("OccupancyWall1")]
		[Bindable(true)]
		public string OccupancyWall1 
		{
			get { return GetColumnValue<string>(Columns.OccupancyWall1); }
			set { SetColumnValue(Columns.OccupancyWall1, value); }
		}
		  
		[XmlAttribute("OccupancyWall2")]
		[Bindable(true)]
		public string OccupancyWall2 
		{
			get { return GetColumnValue<string>(Columns.OccupancyWall2); }
			set { SetColumnValue(Columns.OccupancyWall2, value); }
		}
		  
		[XmlAttribute("OccupancyWall3")]
		[Bindable(true)]
		public string OccupancyWall3 
		{
			get { return GetColumnValue<string>(Columns.OccupancyWall3); }
			set { SetColumnValue(Columns.OccupancyWall3, value); }
		}
		  
		[XmlAttribute("OccupancyWall4")]
		[Bindable(true)]
		public string OccupancyWall4 
		{
			get { return GetColumnValue<string>(Columns.OccupancyWall4); }
			set { SetColumnValue(Columns.OccupancyWall4, value); }
		}
		  
		[XmlAttribute("OccupancyFloor1")]
		[Bindable(true)]
		public string OccupancyFloor1 
		{
			get { return GetColumnValue<string>(Columns.OccupancyFloor1); }
			set { SetColumnValue(Columns.OccupancyFloor1, value); }
		}
		  
		[XmlAttribute("OccupancyFloor2")]
		[Bindable(true)]
		public string OccupancyFloor2 
		{
			get { return GetColumnValue<string>(Columns.OccupancyFloor2); }
			set { SetColumnValue(Columns.OccupancyFloor2, value); }
		}
		  
		[XmlAttribute("OccupancyFloor3")]
		[Bindable(true)]
		public string OccupancyFloor3 
		{
			get { return GetColumnValue<string>(Columns.OccupancyFloor3); }
			set { SetColumnValue(Columns.OccupancyFloor3, value); }
		}
		  
		[XmlAttribute("OccupancyFloor4")]
		[Bindable(true)]
		public string OccupancyFloor4 
		{
			get { return GetColumnValue<string>(Columns.OccupancyFloor4); }
			set { SetColumnValue(Columns.OccupancyFloor4, value); }
		}
		  
		[XmlAttribute("RoomLocation")]
		[Bindable(true)]
		public string RoomLocation 
		{
			get { return GetColumnValue<string>(Columns.RoomLocation); }
			set { SetColumnValue(Columns.RoomLocation, value); }
		}
		  
		[XmlAttribute("BuildingFloor")]
		[Bindable(true)]
		public string BuildingFloor 
		{
			get { return GetColumnValue<string>(Columns.BuildingFloor); }
			set { SetColumnValue(Columns.BuildingFloor, value); }
		}
		  
		[XmlAttribute("EntryType")]
		[Bindable(true)]
		public string EntryType 
		{
			get { return GetColumnValue<string>(Columns.EntryType); }
			set { SetColumnValue(Columns.EntryType, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varExternalID,int varProspectusID,string varDescription,string varVendorMachine,string varLowEnergy,string varHighEnergy,string varRoomType,string varPatientsPerDay,int? varConventionalPct,int? varConventionalPctLE,int? varConventionalPctHE,int? varTBIPct,int? varTBIPctLE,int? varTBIPctHE,int? varIMRTPct,int? varIMRTPctLE,int? varIMRTPctHE,int? varRadioPct,int? varRadioPctLE,int? varRadioPctHE,string varOccupancyWall1,string varOccupancyWall2,string varOccupancyWall3,string varOccupancyWall4,string varOccupancyFloor1,string varOccupancyFloor2,string varOccupancyFloor3,string varOccupancyFloor4,string varRoomLocation,string varBuildingFloor,string varEntryType)
		{
			ProspectRoomExt item = new ProspectRoomExt();
			
			item.ExternalID = varExternalID;
			
			item.ProspectusID = varProspectusID;
			
			item.Description = varDescription;
			
			item.VendorMachine = varVendorMachine;
			
			item.LowEnergy = varLowEnergy;
			
			item.HighEnergy = varHighEnergy;
			
			item.RoomType = varRoomType;
			
			item.PatientsPerDay = varPatientsPerDay;
			
			item.ConventionalPct = varConventionalPct;
			
			item.ConventionalPctLE = varConventionalPctLE;
			
			item.ConventionalPctHE = varConventionalPctHE;
			
			item.TBIPct = varTBIPct;
			
			item.TBIPctLE = varTBIPctLE;
			
			item.TBIPctHE = varTBIPctHE;
			
			item.IMRTPct = varIMRTPct;
			
			item.IMRTPctLE = varIMRTPctLE;
			
			item.IMRTPctHE = varIMRTPctHE;
			
			item.RadioPct = varRadioPct;
			
			item.RadioPctLE = varRadioPctLE;
			
			item.RadioPctHE = varRadioPctHE;
			
			item.OccupancyWall1 = varOccupancyWall1;
			
			item.OccupancyWall2 = varOccupancyWall2;
			
			item.OccupancyWall3 = varOccupancyWall3;
			
			item.OccupancyWall4 = varOccupancyWall4;
			
			item.OccupancyFloor1 = varOccupancyFloor1;
			
			item.OccupancyFloor2 = varOccupancyFloor2;
			
			item.OccupancyFloor3 = varOccupancyFloor3;
			
			item.OccupancyFloor4 = varOccupancyFloor4;
			
			item.RoomLocation = varRoomLocation;
			
			item.BuildingFloor = varBuildingFloor;
			
			item.EntryType = varEntryType;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varExternalID,int varProspectusID,string varDescription,string varVendorMachine,string varLowEnergy,string varHighEnergy,string varRoomType,string varPatientsPerDay,int? varConventionalPct,int? varConventionalPctLE,int? varConventionalPctHE,int? varTBIPct,int? varTBIPctLE,int? varTBIPctHE,int? varIMRTPct,int? varIMRTPctLE,int? varIMRTPctHE,int? varRadioPct,int? varRadioPctLE,int? varRadioPctHE,string varOccupancyWall1,string varOccupancyWall2,string varOccupancyWall3,string varOccupancyWall4,string varOccupancyFloor1,string varOccupancyFloor2,string varOccupancyFloor3,string varOccupancyFloor4,string varRoomLocation,string varBuildingFloor,string varEntryType)
		{
			ProspectRoomExt item = new ProspectRoomExt();
			
				item.Id = varId;
			
				item.ExternalID = varExternalID;
			
				item.ProspectusID = varProspectusID;
			
				item.Description = varDescription;
			
				item.VendorMachine = varVendorMachine;
			
				item.LowEnergy = varLowEnergy;
			
				item.HighEnergy = varHighEnergy;
			
				item.RoomType = varRoomType;
			
				item.PatientsPerDay = varPatientsPerDay;
			
				item.ConventionalPct = varConventionalPct;
			
				item.ConventionalPctLE = varConventionalPctLE;
			
				item.ConventionalPctHE = varConventionalPctHE;
			
				item.TBIPct = varTBIPct;
			
				item.TBIPctLE = varTBIPctLE;
			
				item.TBIPctHE = varTBIPctHE;
			
				item.IMRTPct = varIMRTPct;
			
				item.IMRTPctLE = varIMRTPctLE;
			
				item.IMRTPctHE = varIMRTPctHE;
			
				item.RadioPct = varRadioPct;
			
				item.RadioPctLE = varRadioPctLE;
			
				item.RadioPctHE = varRadioPctHE;
			
				item.OccupancyWall1 = varOccupancyWall1;
			
				item.OccupancyWall2 = varOccupancyWall2;
			
				item.OccupancyWall3 = varOccupancyWall3;
			
				item.OccupancyWall4 = varOccupancyWall4;
			
				item.OccupancyFloor1 = varOccupancyFloor1;
			
				item.OccupancyFloor2 = varOccupancyFloor2;
			
				item.OccupancyFloor3 = varOccupancyFloor3;
			
				item.OccupancyFloor4 = varOccupancyFloor4;
			
				item.RoomLocation = varRoomLocation;
			
				item.BuildingFloor = varBuildingFloor;
			
				item.EntryType = varEntryType;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ExternalIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ProspectusIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn VendorMachineColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn LowEnergyColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn HighEnergyColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn RoomTypeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientsPerDayColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ConventionalPctColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ConventionalPctLEColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ConventionalPctHEColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn TBIPctColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn TBIPctLEColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn TBIPctHEColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn IMRTPctColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn IMRTPctLEColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn IMRTPctHEColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn RadioPctColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn RadioPctLEColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn RadioPctHEColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn OccupancyWall1Column
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn OccupancyWall2Column
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn OccupancyWall3Column
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn OccupancyWall4Column
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn OccupancyFloor1Column
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn OccupancyFloor2Column
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn OccupancyFloor3Column
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn OccupancyFloor4Column
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn RoomLocationColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn BuildingFloorColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn EntryTypeColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string ExternalID = @"ExternalID";
			 public static string ProspectusID = @"ProspectusID";
			 public static string Description = @"Description";
			 public static string VendorMachine = @"VendorMachine";
			 public static string LowEnergy = @"LowEnergy";
			 public static string HighEnergy = @"HighEnergy";
			 public static string RoomType = @"RoomType";
			 public static string PatientsPerDay = @"PatientsPerDay";
			 public static string ConventionalPct = @"ConventionalPct";
			 public static string ConventionalPctLE = @"ConventionalPctLE";
			 public static string ConventionalPctHE = @"ConventionalPctHE";
			 public static string TBIPct = @"TBIPct";
			 public static string TBIPctLE = @"TBIPctLE";
			 public static string TBIPctHE = @"TBIPctHE";
			 public static string IMRTPct = @"IMRTPct";
			 public static string IMRTPctLE = @"IMRTPctLE";
			 public static string IMRTPctHE = @"IMRTPctHE";
			 public static string RadioPct = @"RadioPct";
			 public static string RadioPctLE = @"RadioPctLE";
			 public static string RadioPctHE = @"RadioPctHE";
			 public static string OccupancyWall1 = @"OccupancyWall1";
			 public static string OccupancyWall2 = @"OccupancyWall2";
			 public static string OccupancyWall3 = @"OccupancyWall3";
			 public static string OccupancyWall4 = @"OccupancyWall4";
			 public static string OccupancyFloor1 = @"OccupancyFloor1";
			 public static string OccupancyFloor2 = @"OccupancyFloor2";
			 public static string OccupancyFloor3 = @"OccupancyFloor3";
			 public static string OccupancyFloor4 = @"OccupancyFloor4";
			 public static string RoomLocation = @"RoomLocation";
			 public static string BuildingFloor = @"BuildingFloor";
			 public static string EntryType = @"EntryType";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
