using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL{
    /// <summary>
    /// Strongly-typed collection for the TaggedURLVisit class.
    /// </summary>
    [Serializable]
    public partial class TaggedURLVisitCollection : ReadOnlyList<TaggedURLVisit, TaggedURLVisitCollection>
    {        
        public TaggedURLVisitCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the TaggedURLVisits view.
    /// </summary>
    [Serializable]
    public partial class TaggedURLVisit : ReadOnlyRecord<TaggedURLVisit>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("TaggedURLVisits", TableType.View, DataService.GetInstance("Internal"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarCampaign = new TableSchema.TableColumn(schema);
                colvarCampaign.ColumnName = "Campaign";
                colvarCampaign.DataType = DbType.AnsiString;
                colvarCampaign.MaxLength = 50;
                colvarCampaign.AutoIncrement = false;
                colvarCampaign.IsNullable = true;
                colvarCampaign.IsPrimaryKey = false;
                colvarCampaign.IsForeignKey = false;
                colvarCampaign.IsReadOnly = false;
                
                schema.Columns.Add(colvarCampaign);
                
                TableSchema.TableColumn colvarSource = new TableSchema.TableColumn(schema);
                colvarSource.ColumnName = "Source";
                colvarSource.DataType = DbType.AnsiString;
                colvarSource.MaxLength = 255;
                colvarSource.AutoIncrement = false;
                colvarSource.IsNullable = true;
                colvarSource.IsPrimaryKey = false;
                colvarSource.IsForeignKey = false;
                colvarSource.IsReadOnly = false;
                
                schema.Columns.Add(colvarSource);
                
                TableSchema.TableColumn colvarTargetObjectName = new TableSchema.TableColumn(schema);
                colvarTargetObjectName.ColumnName = "TargetObjectName";
                colvarTargetObjectName.DataType = DbType.AnsiString;
                colvarTargetObjectName.MaxLength = 255;
                colvarTargetObjectName.AutoIncrement = false;
                colvarTargetObjectName.IsNullable = true;
                colvarTargetObjectName.IsPrimaryKey = false;
                colvarTargetObjectName.IsForeignKey = false;
                colvarTargetObjectName.IsReadOnly = false;
                
                schema.Columns.Add(colvarTargetObjectName);
                
                TableSchema.TableColumn colvarVisitDate = new TableSchema.TableColumn(schema);
                colvarVisitDate.ColumnName = "VisitDate";
                colvarVisitDate.DataType = DbType.DateTime;
                colvarVisitDate.MaxLength = 0;
                colvarVisitDate.AutoIncrement = false;
                colvarVisitDate.IsNullable = false;
                colvarVisitDate.IsPrimaryKey = false;
                colvarVisitDate.IsForeignKey = false;
                colvarVisitDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarVisitDate);
                
                TableSchema.TableColumn colvarComputerName = new TableSchema.TableColumn(schema);
                colvarComputerName.ColumnName = "ComputerName";
                colvarComputerName.DataType = DbType.AnsiString;
                colvarComputerName.MaxLength = 255;
                colvarComputerName.AutoIncrement = false;
                colvarComputerName.IsNullable = true;
                colvarComputerName.IsPrimaryKey = false;
                colvarComputerName.IsForeignKey = false;
                colvarComputerName.IsReadOnly = false;
                
                schema.Columns.Add(colvarComputerName);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Internal"].AddSchema("TaggedURLVisits",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public TaggedURLVisit()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public TaggedURLVisit(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public TaggedURLVisit(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public TaggedURLVisit(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Campaign")]
        [Bindable(true)]
        public string Campaign 
	    {
		    get
		    {
			    return GetColumnValue<string>("Campaign");
		    }
            set 
		    {
			    SetColumnValue("Campaign", value);
            }
        }
	      
        [XmlAttribute("Source")]
        [Bindable(true)]
        public string Source 
	    {
		    get
		    {
			    return GetColumnValue<string>("Source");
		    }
            set 
		    {
			    SetColumnValue("Source", value);
            }
        }
	      
        [XmlAttribute("TargetObjectName")]
        [Bindable(true)]
        public string TargetObjectName 
	    {
		    get
		    {
			    return GetColumnValue<string>("TargetObjectName");
		    }
            set 
		    {
			    SetColumnValue("TargetObjectName", value);
            }
        }
	      
        [XmlAttribute("VisitDate")]
        [Bindable(true)]
        public DateTime VisitDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("VisitDate");
		    }
            set 
		    {
			    SetColumnValue("VisitDate", value);
            }
        }
	      
        [XmlAttribute("ComputerName")]
        [Bindable(true)]
        public string ComputerName 
	    {
		    get
		    {
			    return GetColumnValue<string>("ComputerName");
		    }
            set 
		    {
			    SetColumnValue("ComputerName", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Campaign = @"Campaign";
            
            public static string Source = @"Source";
            
            public static string TargetObjectName = @"TargetObjectName";
            
            public static string VisitDate = @"VisitDate";
            
            public static string ComputerName = @"ComputerName";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
