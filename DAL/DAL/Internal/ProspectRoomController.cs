using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
    /// <summary>
    /// Controller class for ProspectRoom
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class ProspectRoomController
    {
        // Preload our schema..
        ProspectRoom thisSchemaLoad = new ProspectRoom();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public ProspectRoomCollection FetchAll()
        {
            ProspectRoomCollection coll = new ProspectRoomCollection();
            Query qry = new Query(ProspectRoom.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ProspectRoomCollection FetchByID(object Id)
        {
            ProspectRoomCollection coll = new ProspectRoomCollection().Where("ID", Id).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public ProspectRoomCollection FetchByQuery(Query qry)
        {
            ProspectRoomCollection coll = new ProspectRoomCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (ProspectRoom.Delete(Id) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (ProspectRoom.Destroy(Id) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int? ExternalID,int ProspectusID,string Description,string VendorMachine,string LowEnergy,string HighEnergy,string RoomType,string PatientsPerDay,int? ConventionalPct,int? ConventionalPctLE,int? ConventionalPctHE,int? TBIPct,int? TBIPctLE,int? TBIPctHE,int? IMRTPct,int? IMRTPctLE,int? IMRTPctHE,int? RadioPct,int? RadioPctLE,int? RadioPctHE,string OccupancyWall1,string OccupancyWall2,string OccupancyWall3,string OccupancyWall4,string OccupancyFloor1,string OccupancyFloor2,string OccupancyFloor3,string OccupancyFloor4,string RoomLocation,string BuildingFloor,string EntryType)
	    {
		    ProspectRoom item = new ProspectRoom();
		    
            item.ExternalID = ExternalID;
            
            item.ProspectusID = ProspectusID;
            
            item.Description = Description;
            
            item.VendorMachine = VendorMachine;
            
            item.LowEnergy = LowEnergy;
            
            item.HighEnergy = HighEnergy;
            
            item.RoomType = RoomType;
            
            item.PatientsPerDay = PatientsPerDay;
            
            item.ConventionalPct = ConventionalPct;
            
            item.ConventionalPctLE = ConventionalPctLE;
            
            item.ConventionalPctHE = ConventionalPctHE;
            
            item.TBIPct = TBIPct;
            
            item.TBIPctLE = TBIPctLE;
            
            item.TBIPctHE = TBIPctHE;
            
            item.IMRTPct = IMRTPct;
            
            item.IMRTPctLE = IMRTPctLE;
            
            item.IMRTPctHE = IMRTPctHE;
            
            item.RadioPct = RadioPct;
            
            item.RadioPctLE = RadioPctLE;
            
            item.RadioPctHE = RadioPctHE;
            
            item.OccupancyWall1 = OccupancyWall1;
            
            item.OccupancyWall2 = OccupancyWall2;
            
            item.OccupancyWall3 = OccupancyWall3;
            
            item.OccupancyWall4 = OccupancyWall4;
            
            item.OccupancyFloor1 = OccupancyFloor1;
            
            item.OccupancyFloor2 = OccupancyFloor2;
            
            item.OccupancyFloor3 = OccupancyFloor3;
            
            item.OccupancyFloor4 = OccupancyFloor4;
            
            item.RoomLocation = RoomLocation;
            
            item.BuildingFloor = BuildingFloor;
            
            item.EntryType = EntryType;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int Id,int? ExternalID,int ProspectusID,string Description,string VendorMachine,string LowEnergy,string HighEnergy,string RoomType,string PatientsPerDay,int? ConventionalPct,int? ConventionalPctLE,int? ConventionalPctHE,int? TBIPct,int? TBIPctLE,int? TBIPctHE,int? IMRTPct,int? IMRTPctLE,int? IMRTPctHE,int? RadioPct,int? RadioPctLE,int? RadioPctHE,string OccupancyWall1,string OccupancyWall2,string OccupancyWall3,string OccupancyWall4,string OccupancyFloor1,string OccupancyFloor2,string OccupancyFloor3,string OccupancyFloor4,string RoomLocation,string BuildingFloor,string EntryType)
	    {
		    ProspectRoom item = new ProspectRoom();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.Id = Id;
				
			item.ExternalID = ExternalID;
				
			item.ProspectusID = ProspectusID;
				
			item.Description = Description;
				
			item.VendorMachine = VendorMachine;
				
			item.LowEnergy = LowEnergy;
				
			item.HighEnergy = HighEnergy;
				
			item.RoomType = RoomType;
				
			item.PatientsPerDay = PatientsPerDay;
				
			item.ConventionalPct = ConventionalPct;
				
			item.ConventionalPctLE = ConventionalPctLE;
				
			item.ConventionalPctHE = ConventionalPctHE;
				
			item.TBIPct = TBIPct;
				
			item.TBIPctLE = TBIPctLE;
				
			item.TBIPctHE = TBIPctHE;
				
			item.IMRTPct = IMRTPct;
				
			item.IMRTPctLE = IMRTPctLE;
				
			item.IMRTPctHE = IMRTPctHE;
				
			item.RadioPct = RadioPct;
				
			item.RadioPctLE = RadioPctLE;
				
			item.RadioPctHE = RadioPctHE;
				
			item.OccupancyWall1 = OccupancyWall1;
				
			item.OccupancyWall2 = OccupancyWall2;
				
			item.OccupancyWall3 = OccupancyWall3;
				
			item.OccupancyWall4 = OccupancyWall4;
				
			item.OccupancyFloor1 = OccupancyFloor1;
				
			item.OccupancyFloor2 = OccupancyFloor2;
				
			item.OccupancyFloor3 = OccupancyFloor3;
				
			item.OccupancyFloor4 = OccupancyFloor4;
				
			item.RoomLocation = RoomLocation;
				
			item.BuildingFloor = BuildingFloor;
				
			item.EntryType = EntryType;
				
	        item.Save(UserName);
	    }
    }
}
