using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL{
    /// <summary>
    /// Strongly-typed collection for the EstimatingDepartmentWeeklySummaryPrior class.
    /// </summary>
    [Serializable]
    public partial class EstimatingDepartmentWeeklySummaryPriorCollection : ReadOnlyList<EstimatingDepartmentWeeklySummaryPrior, EstimatingDepartmentWeeklySummaryPriorCollection>
    {        
        public EstimatingDepartmentWeeklySummaryPriorCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the EstimatingDepartmentWeeklySummaryPrior view.
    /// </summary>
    [Serializable]
    public partial class EstimatingDepartmentWeeklySummaryPrior : ReadOnlyRecord<EstimatingDepartmentWeeklySummaryPrior>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("EstimatingDepartmentWeeklySummaryPrior", TableType.View, DataService.GetInstance("Internal"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarDisplayText = new TableSchema.TableColumn(schema);
                colvarDisplayText.ColumnName = "DisplayText";
                colvarDisplayText.DataType = DbType.AnsiString;
                colvarDisplayText.MaxLength = 256;
                colvarDisplayText.AutoIncrement = false;
                colvarDisplayText.IsNullable = true;
                colvarDisplayText.IsPrimaryKey = false;
                colvarDisplayText.IsForeignKey = false;
                colvarDisplayText.IsReadOnly = false;
                
                schema.Columns.Add(colvarDisplayText);
                
                TableSchema.TableColumn colvarEstimatorName = new TableSchema.TableColumn(schema);
                colvarEstimatorName.ColumnName = "EstimatorName";
                colvarEstimatorName.DataType = DbType.AnsiString;
                colvarEstimatorName.MaxLength = 50;
                colvarEstimatorName.AutoIncrement = false;
                colvarEstimatorName.IsNullable = true;
                colvarEstimatorName.IsPrimaryKey = false;
                colvarEstimatorName.IsForeignKey = false;
                colvarEstimatorName.IsReadOnly = false;
                
                schema.Columns.Add(colvarEstimatorName);
                
                TableSchema.TableColumn colvarSalespersonName = new TableSchema.TableColumn(schema);
                colvarSalespersonName.ColumnName = "SalespersonName";
                colvarSalespersonName.DataType = DbType.AnsiString;
                colvarSalespersonName.MaxLength = 50;
                colvarSalespersonName.AutoIncrement = false;
                colvarSalespersonName.IsNullable = true;
                colvarSalespersonName.IsPrimaryKey = false;
                colvarSalespersonName.IsForeignKey = false;
                colvarSalespersonName.IsReadOnly = false;
                
                schema.Columns.Add(colvarSalespersonName);
                
                TableSchema.TableColumn colvarDateTimeStamp = new TableSchema.TableColumn(schema);
                colvarDateTimeStamp.ColumnName = "DateTimeStamp";
                colvarDateTimeStamp.DataType = DbType.DateTime;
                colvarDateTimeStamp.MaxLength = 0;
                colvarDateTimeStamp.AutoIncrement = false;
                colvarDateTimeStamp.IsNullable = false;
                colvarDateTimeStamp.IsPrimaryKey = false;
                colvarDateTimeStamp.IsForeignKey = false;
                colvarDateTimeStamp.IsReadOnly = false;
                
                schema.Columns.Add(colvarDateTimeStamp);
                
                TableSchema.TableColumn colvarCurrentStatus = new TableSchema.TableColumn(schema);
                colvarCurrentStatus.ColumnName = "CurrentStatus";
                colvarCurrentStatus.DataType = DbType.AnsiString;
                colvarCurrentStatus.MaxLength = -1;
                colvarCurrentStatus.AutoIncrement = false;
                colvarCurrentStatus.IsNullable = true;
                colvarCurrentStatus.IsPrimaryKey = false;
                colvarCurrentStatus.IsForeignKey = false;
                colvarCurrentStatus.IsReadOnly = false;
                
                schema.Columns.Add(colvarCurrentStatus);
                
                TableSchema.TableColumn colvarStatusID = new TableSchema.TableColumn(schema);
                colvarStatusID.ColumnName = "StatusID";
                colvarStatusID.DataType = DbType.Int32;
                colvarStatusID.MaxLength = 0;
                colvarStatusID.AutoIncrement = false;
                colvarStatusID.IsNullable = false;
                colvarStatusID.IsPrimaryKey = false;
                colvarStatusID.IsForeignKey = false;
                colvarStatusID.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatusID);
                
                TableSchema.TableColumn colvarStepID = new TableSchema.TableColumn(schema);
                colvarStepID.ColumnName = "StepID";
                colvarStepID.DataType = DbType.Int32;
                colvarStepID.MaxLength = 0;
                colvarStepID.AutoIncrement = false;
                colvarStepID.IsNullable = false;
                colvarStepID.IsPrimaryKey = false;
                colvarStepID.IsForeignKey = false;
                colvarStepID.IsReadOnly = false;
                
                schema.Columns.Add(colvarStepID);
                
                TableSchema.TableColumn colvarWorkflowStepID = new TableSchema.TableColumn(schema);
                colvarWorkflowStepID.ColumnName = "WorkflowStepID";
                colvarWorkflowStepID.DataType = DbType.Int32;
                colvarWorkflowStepID.MaxLength = 0;
                colvarWorkflowStepID.AutoIncrement = false;
                colvarWorkflowStepID.IsNullable = false;
                colvarWorkflowStepID.IsPrimaryKey = false;
                colvarWorkflowStepID.IsForeignKey = false;
                colvarWorkflowStepID.IsReadOnly = false;
                
                schema.Columns.Add(colvarWorkflowStepID);
                
                TableSchema.TableColumn colvarPriority = new TableSchema.TableColumn(schema);
                colvarPriority.ColumnName = "Priority";
                colvarPriority.DataType = DbType.Int32;
                colvarPriority.MaxLength = 0;
                colvarPriority.AutoIncrement = false;
                colvarPriority.IsNullable = true;
                colvarPriority.IsPrimaryKey = false;
                colvarPriority.IsForeignKey = false;
                colvarPriority.IsReadOnly = false;
                
                schema.Columns.Add(colvarPriority);
                
                TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
                colvarComments.ColumnName = "Comments";
                colvarComments.DataType = DbType.AnsiString;
                colvarComments.MaxLength = -1;
                colvarComments.AutoIncrement = false;
                colvarComments.IsNullable = true;
                colvarComments.IsPrimaryKey = false;
                colvarComments.IsForeignKey = false;
                colvarComments.IsReadOnly = false;
                
                schema.Columns.Add(colvarComments);
                
                TableSchema.TableColumn colvarJobSummary = new TableSchema.TableColumn(schema);
                colvarJobSummary.ColumnName = "JobSummary";
                colvarJobSummary.DataType = DbType.AnsiString;
                colvarJobSummary.MaxLength = 126;
                colvarJobSummary.AutoIncrement = false;
                colvarJobSummary.IsNullable = true;
                colvarJobSummary.IsPrimaryKey = false;
                colvarJobSummary.IsForeignKey = false;
                colvarJobSummary.IsReadOnly = false;
                
                schema.Columns.Add(colvarJobSummary);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Internal"].AddSchema("EstimatingDepartmentWeeklySummaryPrior",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public EstimatingDepartmentWeeklySummaryPrior()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public EstimatingDepartmentWeeklySummaryPrior(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public EstimatingDepartmentWeeklySummaryPrior(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public EstimatingDepartmentWeeklySummaryPrior(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("DisplayText")]
        [Bindable(true)]
        public string DisplayText 
	    {
		    get
		    {
			    return GetColumnValue<string>("DisplayText");
		    }
            set 
		    {
			    SetColumnValue("DisplayText", value);
            }
        }
	      
        [XmlAttribute("EstimatorName")]
        [Bindable(true)]
        public string EstimatorName 
	    {
		    get
		    {
			    return GetColumnValue<string>("EstimatorName");
		    }
            set 
		    {
			    SetColumnValue("EstimatorName", value);
            }
        }
	      
        [XmlAttribute("SalespersonName")]
        [Bindable(true)]
        public string SalespersonName 
	    {
		    get
		    {
			    return GetColumnValue<string>("SalespersonName");
		    }
            set 
		    {
			    SetColumnValue("SalespersonName", value);
            }
        }
	      
        [XmlAttribute("DateTimeStamp")]
        [Bindable(true)]
        public DateTime DateTimeStamp 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("DateTimeStamp");
		    }
            set 
		    {
			    SetColumnValue("DateTimeStamp", value);
            }
        }
	      
        [XmlAttribute("CurrentStatus")]
        [Bindable(true)]
        public string CurrentStatus 
	    {
		    get
		    {
			    return GetColumnValue<string>("CurrentStatus");
		    }
            set 
		    {
			    SetColumnValue("CurrentStatus", value);
            }
        }
	      
        [XmlAttribute("StatusID")]
        [Bindable(true)]
        public int StatusID 
	    {
		    get
		    {
			    return GetColumnValue<int>("StatusID");
		    }
            set 
		    {
			    SetColumnValue("StatusID", value);
            }
        }
	      
        [XmlAttribute("StepID")]
        [Bindable(true)]
        public int StepID 
	    {
		    get
		    {
			    return GetColumnValue<int>("StepID");
		    }
            set 
		    {
			    SetColumnValue("StepID", value);
            }
        }
	      
        [XmlAttribute("WorkflowStepID")]
        [Bindable(true)]
        public int WorkflowStepID 
	    {
		    get
		    {
			    return GetColumnValue<int>("WorkflowStepID");
		    }
            set 
		    {
			    SetColumnValue("WorkflowStepID", value);
            }
        }
	      
        [XmlAttribute("Priority")]
        [Bindable(true)]
        public int? Priority 
	    {
		    get
		    {
			    return GetColumnValue<int?>("Priority");
		    }
            set 
		    {
			    SetColumnValue("Priority", value);
            }
        }
	      
        [XmlAttribute("Comments")]
        [Bindable(true)]
        public string Comments 
	    {
		    get
		    {
			    return GetColumnValue<string>("Comments");
		    }
            set 
		    {
			    SetColumnValue("Comments", value);
            }
        }
	      
        [XmlAttribute("JobSummary")]
        [Bindable(true)]
        public string JobSummary 
	    {
		    get
		    {
			    return GetColumnValue<string>("JobSummary");
		    }
            set 
		    {
			    SetColumnValue("JobSummary", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string DisplayText = @"DisplayText";
            
            public static string EstimatorName = @"EstimatorName";
            
            public static string SalespersonName = @"SalespersonName";
            
            public static string DateTimeStamp = @"DateTimeStamp";
            
            public static string CurrentStatus = @"CurrentStatus";
            
            public static string StatusID = @"StatusID";
            
            public static string StepID = @"StepID";
            
            public static string WorkflowStepID = @"WorkflowStepID";
            
            public static string Priority = @"Priority";
            
            public static string Comments = @"Comments";
            
            public static string JobSummary = @"JobSummary";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
