using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
    /// <summary>
    /// Controller class for Prospectus
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class ProspectuController
    {
        // Preload our schema..
        Prospectu thisSchemaLoad = new Prospectu();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public ProspectuCollection FetchAll()
        {
            ProspectuCollection coll = new ProspectuCollection();
            Query qry = new Query(Prospectu.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ProspectuCollection FetchByID(object Id)
        {
            ProspectuCollection coll = new ProspectuCollection().Where("ID", Id).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public ProspectuCollection FetchByQuery(Query qry)
        {
            ProspectuCollection coll = new ProspectuCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (Prospectu.Delete(Id) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (Prospectu.Destroy(Id) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int? ExternalID,string Facility,string City,string State,string Country,bool NewConstr,bool FacilityUpgrade,bool Supplemental,string OwnerRepName,string OwnerRepPhone,string OwnerRepEmail,string PhysicistName,string PhysicistPhone,string PhysicistEmail,string OtherContactType,string OtherContactName,string OtherContactPhone,string OtherContactEmail,bool ProductInfo,bool RoomLayouts,bool ConstructionDetails,bool PhysicsReport,bool BudgetEstimate,bool MeetingRequested,bool EntryDoors,bool AcceleratorPit,bool FacilityDevelopment,bool InteriorFinishes,bool DuctShielding,bool Foundations,bool Vroc,bool Quantum,DateTime? ConstructionStartDate,DateTime? MachineDelivery,DateTime? FoundationInstall,DateTime? FirstTreatmentDate,string RegulatoryDesignRequirements,string RegulatoryDesignRequirementOther,string OtherRegDesignReqPublic,string OtherRegDesignReqControlled)
	    {
		    Prospectu item = new Prospectu();
		    
            item.ExternalID = ExternalID;
            
            item.Facility = Facility;
            
            item.City = City;
            
            item.State = State;
            
            item.Country = Country;
            
            item.NewConstr = NewConstr;
            
            item.FacilityUpgrade = FacilityUpgrade;
            
            item.Supplemental = Supplemental;
            
            item.OwnerRepName = OwnerRepName;
            
            item.OwnerRepPhone = OwnerRepPhone;
            
            item.OwnerRepEmail = OwnerRepEmail;
            
            item.PhysicistName = PhysicistName;
            
            item.PhysicistPhone = PhysicistPhone;
            
            item.PhysicistEmail = PhysicistEmail;
            
            item.OtherContactType = OtherContactType;
            
            item.OtherContactName = OtherContactName;
            
            item.OtherContactPhone = OtherContactPhone;
            
            item.OtherContactEmail = OtherContactEmail;
            
            item.ProductInfo = ProductInfo;
            
            item.RoomLayouts = RoomLayouts;
            
            item.ConstructionDetails = ConstructionDetails;
            
            item.PhysicsReport = PhysicsReport;
            
            item.BudgetEstimate = BudgetEstimate;
            
            item.MeetingRequested = MeetingRequested;
            
            item.EntryDoors = EntryDoors;
            
            item.AcceleratorPit = AcceleratorPit;
            
            item.FacilityDevelopment = FacilityDevelopment;
            
            item.InteriorFinishes = InteriorFinishes;
            
            item.DuctShielding = DuctShielding;
            
            item.Foundations = Foundations;
            
            item.Vroc = Vroc;
            
            item.Quantum = Quantum;
            
            item.ConstructionStartDate = ConstructionStartDate;
            
            item.MachineDelivery = MachineDelivery;
            
            item.FoundationInstall = FoundationInstall;
            
            item.FirstTreatmentDate = FirstTreatmentDate;
            
            item.RegulatoryDesignRequirements = RegulatoryDesignRequirements;
            
            item.RegulatoryDesignRequirementOther = RegulatoryDesignRequirementOther;
            
            item.OtherRegDesignReqPublic = OtherRegDesignReqPublic;
            
            item.OtherRegDesignReqControlled = OtherRegDesignReqControlled;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int Id,int? ExternalID,string Facility,string City,string State,string Country,bool NewConstr,bool FacilityUpgrade,bool Supplemental,string OwnerRepName,string OwnerRepPhone,string OwnerRepEmail,string PhysicistName,string PhysicistPhone,string PhysicistEmail,string OtherContactType,string OtherContactName,string OtherContactPhone,string OtherContactEmail,bool ProductInfo,bool RoomLayouts,bool ConstructionDetails,bool PhysicsReport,bool BudgetEstimate,bool MeetingRequested,bool EntryDoors,bool AcceleratorPit,bool FacilityDevelopment,bool InteriorFinishes,bool DuctShielding,bool Foundations,bool Vroc,bool Quantum,DateTime? ConstructionStartDate,DateTime? MachineDelivery,DateTime? FoundationInstall,DateTime? FirstTreatmentDate,string RegulatoryDesignRequirements,string RegulatoryDesignRequirementOther,string OtherRegDesignReqPublic,string OtherRegDesignReqControlled)
	    {
		    Prospectu item = new Prospectu();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.Id = Id;
				
			item.ExternalID = ExternalID;
				
			item.Facility = Facility;
				
			item.City = City;
				
			item.State = State;
				
			item.Country = Country;
				
			item.NewConstr = NewConstr;
				
			item.FacilityUpgrade = FacilityUpgrade;
				
			item.Supplemental = Supplemental;
				
			item.OwnerRepName = OwnerRepName;
				
			item.OwnerRepPhone = OwnerRepPhone;
				
			item.OwnerRepEmail = OwnerRepEmail;
				
			item.PhysicistName = PhysicistName;
				
			item.PhysicistPhone = PhysicistPhone;
				
			item.PhysicistEmail = PhysicistEmail;
				
			item.OtherContactType = OtherContactType;
				
			item.OtherContactName = OtherContactName;
				
			item.OtherContactPhone = OtherContactPhone;
				
			item.OtherContactEmail = OtherContactEmail;
				
			item.ProductInfo = ProductInfo;
				
			item.RoomLayouts = RoomLayouts;
				
			item.ConstructionDetails = ConstructionDetails;
				
			item.PhysicsReport = PhysicsReport;
				
			item.BudgetEstimate = BudgetEstimate;
				
			item.MeetingRequested = MeetingRequested;
				
			item.EntryDoors = EntryDoors;
				
			item.AcceleratorPit = AcceleratorPit;
				
			item.FacilityDevelopment = FacilityDevelopment;
				
			item.InteriorFinishes = InteriorFinishes;
				
			item.DuctShielding = DuctShielding;
				
			item.Foundations = Foundations;
				
			item.Vroc = Vroc;
				
			item.Quantum = Quantum;
				
			item.ConstructionStartDate = ConstructionStartDate;
				
			item.MachineDelivery = MachineDelivery;
				
			item.FoundationInstall = FoundationInstall;
				
			item.FirstTreatmentDate = FirstTreatmentDate;
				
			item.RegulatoryDesignRequirements = RegulatoryDesignRequirements;
				
			item.RegulatoryDesignRequirementOther = RegulatoryDesignRequirementOther;
				
			item.OtherRegDesignReqPublic = OtherRegDesignReqPublic;
				
			item.OtherRegDesignReqControlled = OtherRegDesignReqControlled;
				
	        item.Save(UserName);
	    }
    }
}
