using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL{
    /// <summary>
    /// Strongly-typed collection for the EstimateTimelineAuditActive class.
    /// </summary>
    [Serializable]
    public partial class EstimateTimelineAuditActiveCollection : ReadOnlyList<EstimateTimelineAuditActive, EstimateTimelineAuditActiveCollection>
    {        
        public EstimateTimelineAuditActiveCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the EstimateTimelineAudit-Active view.
    /// </summary>
    [Serializable]
    public partial class EstimateTimelineAuditActive : ReadOnlyRecord<EstimateTimelineAuditActive>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("EstimateTimelineAudit-Active", TableType.View, DataService.GetInstance("Internal"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarExpr1 = new TableSchema.TableColumn(schema);
                colvarExpr1.ColumnName = "Expr1";
                colvarExpr1.DataType = DbType.AnsiString;
                colvarExpr1.MaxLength = 257;
                colvarExpr1.AutoIncrement = false;
                colvarExpr1.IsNullable = true;
                colvarExpr1.IsPrimaryKey = false;
                colvarExpr1.IsForeignKey = false;
                colvarExpr1.IsReadOnly = false;
                
                schema.Columns.Add(colvarExpr1);
                
                TableSchema.TableColumn colvarStepX = new TableSchema.TableColumn(schema);
                colvarStepX.ColumnName = "Step";
                colvarStepX.DataType = DbType.Int32;
                colvarStepX.MaxLength = 0;
                colvarStepX.AutoIncrement = false;
                colvarStepX.IsNullable = false;
                colvarStepX.IsPrimaryKey = false;
                colvarStepX.IsForeignKey = false;
                colvarStepX.IsReadOnly = false;
                
                schema.Columns.Add(colvarStepX);
                
                TableSchema.TableColumn colvarAction = new TableSchema.TableColumn(schema);
                colvarAction.ColumnName = "Action";
                colvarAction.DataType = DbType.AnsiString;
                colvarAction.MaxLength = 50;
                colvarAction.AutoIncrement = false;
                colvarAction.IsNullable = false;
                colvarAction.IsPrimaryKey = false;
                colvarAction.IsForeignKey = false;
                colvarAction.IsReadOnly = false;
                
                schema.Columns.Add(colvarAction);
                
                TableSchema.TableColumn colvarDateTimeStamp = new TableSchema.TableColumn(schema);
                colvarDateTimeStamp.ColumnName = "DateTimeStamp";
                colvarDateTimeStamp.DataType = DbType.DateTime;
                colvarDateTimeStamp.MaxLength = 0;
                colvarDateTimeStamp.AutoIncrement = false;
                colvarDateTimeStamp.IsNullable = true;
                colvarDateTimeStamp.IsPrimaryKey = false;
                colvarDateTimeStamp.IsForeignKey = false;
                colvarDateTimeStamp.IsReadOnly = false;
                
                schema.Columns.Add(colvarDateTimeStamp);
                
                TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
                colvarName.ColumnName = "Name";
                colvarName.DataType = DbType.AnsiString;
                colvarName.MaxLength = 50;
                colvarName.AutoIncrement = false;
                colvarName.IsNullable = false;
                colvarName.IsPrimaryKey = false;
                colvarName.IsForeignKey = false;
                colvarName.IsReadOnly = false;
                
                schema.Columns.Add(colvarName);
                
                TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
                colvarComments.ColumnName = "Comments";
                colvarComments.DataType = DbType.AnsiString;
                colvarComments.MaxLength = -1;
                colvarComments.AutoIncrement = false;
                colvarComments.IsNullable = true;
                colvarComments.IsPrimaryKey = false;
                colvarComments.IsForeignKey = false;
                colvarComments.IsReadOnly = false;
                
                schema.Columns.Add(colvarComments);
                
                TableSchema.TableColumn colvarPriority = new TableSchema.TableColumn(schema);
                colvarPriority.ColumnName = "Priority";
                colvarPriority.DataType = DbType.Int32;
                colvarPriority.MaxLength = 0;
                colvarPriority.AutoIncrement = false;
                colvarPriority.IsNullable = true;
                colvarPriority.IsPrimaryKey = false;
                colvarPriority.IsForeignKey = false;
                colvarPriority.IsReadOnly = false;
                
                schema.Columns.Add(colvarPriority);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Internal"].AddSchema("EstimateTimelineAudit-Active",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public EstimateTimelineAuditActive()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public EstimateTimelineAuditActive(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public EstimateTimelineAuditActive(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public EstimateTimelineAuditActive(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Expr1")]
        [Bindable(true)]
        public string Expr1 
	    {
		    get
		    {
			    return GetColumnValue<string>("Expr1");
		    }
            set 
		    {
			    SetColumnValue("Expr1", value);
            }
        }
	      
        [XmlAttribute("StepX")]
        [Bindable(true)]
        public int StepX 
	    {
		    get
		    {
			    return GetColumnValue<int>("Step");
		    }
            set 
		    {
			    SetColumnValue("Step", value);
            }
        }
	      
        [XmlAttribute("Action")]
        [Bindable(true)]
        public string Action 
	    {
		    get
		    {
			    return GetColumnValue<string>("Action");
		    }
            set 
		    {
			    SetColumnValue("Action", value);
            }
        }
	      
        [XmlAttribute("DateTimeStamp")]
        [Bindable(true)]
        public DateTime? DateTimeStamp 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("DateTimeStamp");
		    }
            set 
		    {
			    SetColumnValue("DateTimeStamp", value);
            }
        }
	      
        [XmlAttribute("Name")]
        [Bindable(true)]
        public string Name 
	    {
		    get
		    {
			    return GetColumnValue<string>("Name");
		    }
            set 
		    {
			    SetColumnValue("Name", value);
            }
        }
	      
        [XmlAttribute("Comments")]
        [Bindable(true)]
        public string Comments 
	    {
		    get
		    {
			    return GetColumnValue<string>("Comments");
		    }
            set 
		    {
			    SetColumnValue("Comments", value);
            }
        }
	      
        [XmlAttribute("Priority")]
        [Bindable(true)]
        public int? Priority 
	    {
		    get
		    {
			    return GetColumnValue<int?>("Priority");
		    }
            set 
		    {
			    SetColumnValue("Priority", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Expr1 = @"Expr1";
            
            public static string StepX = @"Step";
            
            public static string Action = @"Action";
            
            public static string DateTimeStamp = @"DateTimeStamp";
            
            public static string Name = @"Name";
            
            public static string Comments = @"Comments";
            
            public static string Priority = @"Priority";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
