using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL{
    /// <summary>
    /// Strongly-typed collection for the EstimateDisplay class.
    /// </summary>
    [Serializable]
    public partial class EstimateDisplayCollection : ReadOnlyList<EstimateDisplay, EstimateDisplayCollection>
    {        
        public EstimateDisplayCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the EstimateDisplay view.
    /// </summary>
    [Serializable]
    public partial class EstimateDisplay : ReadOnlyRecord<EstimateDisplay>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("EstimateDisplay", TableType.View, DataService.GetInstance("Internal"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarDisplayText = new TableSchema.TableColumn(schema);
                colvarDisplayText.ColumnName = "DisplayText";
                colvarDisplayText.DataType = DbType.AnsiString;
                colvarDisplayText.MaxLength = 256;
                colvarDisplayText.AutoIncrement = false;
                colvarDisplayText.IsNullable = true;
                colvarDisplayText.IsPrimaryKey = false;
                colvarDisplayText.IsForeignKey = false;
                colvarDisplayText.IsReadOnly = false;
                
                schema.Columns.Add(colvarDisplayText);
                
                TableSchema.TableColumn colvarEstId = new TableSchema.TableColumn(schema);
                colvarEstId.ColumnName = "EstId";
                colvarEstId.DataType = DbType.Int32;
                colvarEstId.MaxLength = 0;
                colvarEstId.AutoIncrement = false;
                colvarEstId.IsNullable = false;
                colvarEstId.IsPrimaryKey = false;
                colvarEstId.IsForeignKey = false;
                colvarEstId.IsReadOnly = false;
                
                schema.Columns.Add(colvarEstId);
                
                TableSchema.TableColumn colvarPriority = new TableSchema.TableColumn(schema);
                colvarPriority.ColumnName = "Priority";
                colvarPriority.DataType = DbType.Int32;
                colvarPriority.MaxLength = 0;
                colvarPriority.AutoIncrement = false;
                colvarPriority.IsNullable = true;
                colvarPriority.IsPrimaryKey = false;
                colvarPriority.IsForeignKey = false;
                colvarPriority.IsReadOnly = false;
                
                schema.Columns.Add(colvarPriority);
                
                TableSchema.TableColumn colvarEstimateSent = new TableSchema.TableColumn(schema);
                colvarEstimateSent.ColumnName = "EstimateSent";
                colvarEstimateSent.DataType = DbType.Boolean;
                colvarEstimateSent.MaxLength = 0;
                colvarEstimateSent.AutoIncrement = false;
                colvarEstimateSent.IsNullable = false;
                colvarEstimateSent.IsPrimaryKey = false;
                colvarEstimateSent.IsForeignKey = false;
                colvarEstimateSent.IsReadOnly = false;
                
                schema.Columns.Add(colvarEstimateSent);
                
                TableSchema.TableColumn colvarEstimateSentDate = new TableSchema.TableColumn(schema);
                colvarEstimateSentDate.ColumnName = "EstimateSentDate";
                colvarEstimateSentDate.DataType = DbType.DateTime;
                colvarEstimateSentDate.MaxLength = 0;
                colvarEstimateSentDate.AutoIncrement = false;
                colvarEstimateSentDate.IsNullable = true;
                colvarEstimateSentDate.IsPrimaryKey = false;
                colvarEstimateSentDate.IsForeignKey = false;
                colvarEstimateSentDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarEstimateSentDate);
                
                TableSchema.TableColumn colvarStepID = new TableSchema.TableColumn(schema);
                colvarStepID.ColumnName = "StepID";
                colvarStepID.DataType = DbType.Int32;
                colvarStepID.MaxLength = 0;
                colvarStepID.AutoIncrement = false;
                colvarStepID.IsNullable = false;
                colvarStepID.IsPrimaryKey = false;
                colvarStepID.IsForeignKey = false;
                colvarStepID.IsReadOnly = false;
                
                schema.Columns.Add(colvarStepID);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Internal"].AddSchema("EstimateDisplay",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public EstimateDisplay()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public EstimateDisplay(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public EstimateDisplay(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public EstimateDisplay(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("DisplayText")]
        [Bindable(true)]
        public string DisplayText 
	    {
		    get
		    {
			    return GetColumnValue<string>("DisplayText");
		    }
            set 
		    {
			    SetColumnValue("DisplayText", value);
            }
        }
	      
        [XmlAttribute("EstId")]
        [Bindable(true)]
        public int EstId 
	    {
		    get
		    {
			    return GetColumnValue<int>("EstId");
		    }
            set 
		    {
			    SetColumnValue("EstId", value);
            }
        }
	      
        [XmlAttribute("Priority")]
        [Bindable(true)]
        public int? Priority 
	    {
		    get
		    {
			    return GetColumnValue<int?>("Priority");
		    }
            set 
		    {
			    SetColumnValue("Priority", value);
            }
        }
	      
        [XmlAttribute("EstimateSent")]
        [Bindable(true)]
        public bool EstimateSent 
	    {
		    get
		    {
			    return GetColumnValue<bool>("EstimateSent");
		    }
            set 
		    {
			    SetColumnValue("EstimateSent", value);
            }
        }
	      
        [XmlAttribute("EstimateSentDate")]
        [Bindable(true)]
        public DateTime? EstimateSentDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("EstimateSentDate");
		    }
            set 
		    {
			    SetColumnValue("EstimateSentDate", value);
            }
        }
	      
        [XmlAttribute("StepID")]
        [Bindable(true)]
        public int StepID 
	    {
		    get
		    {
			    return GetColumnValue<int>("StepID");
		    }
            set 
		    {
			    SetColumnValue("StepID", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string DisplayText = @"DisplayText";
            
            public static string EstId = @"EstId";
            
            public static string Priority = @"Priority";
            
            public static string EstimateSent = @"EstimateSent";
            
            public static string EstimateSentDate = @"EstimateSentDate";
            
            public static string StepID = @"StepID";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
