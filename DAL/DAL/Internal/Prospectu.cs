using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the Prospectu class.
	/// </summary>
    [Serializable]
	public partial class ProspectuCollection : ActiveList<Prospectu, ProspectuCollection>
	{	   
		public ProspectuCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ProspectuCollection</returns>
		public ProspectuCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Prospectu o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Prospectus table.
	/// </summary>
	[Serializable]
	public partial class Prospectu : ActiveRecord<Prospectu>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Prospectu()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Prospectu(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Prospectu(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Prospectu(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Prospectus", TableType.Table, DataService.GetInstance("Internal"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarExternalID = new TableSchema.TableColumn(schema);
				colvarExternalID.ColumnName = "ExternalID";
				colvarExternalID.DataType = DbType.Int32;
				colvarExternalID.MaxLength = 0;
				colvarExternalID.AutoIncrement = false;
				colvarExternalID.IsNullable = true;
				colvarExternalID.IsPrimaryKey = false;
				colvarExternalID.IsForeignKey = false;
				colvarExternalID.IsReadOnly = false;
				colvarExternalID.DefaultSetting = @"";
				colvarExternalID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExternalID);
				
				TableSchema.TableColumn colvarFacility = new TableSchema.TableColumn(schema);
				colvarFacility.ColumnName = "Facility";
				colvarFacility.DataType = DbType.AnsiString;
				colvarFacility.MaxLength = 100;
				colvarFacility.AutoIncrement = false;
				colvarFacility.IsNullable = true;
				colvarFacility.IsPrimaryKey = false;
				colvarFacility.IsForeignKey = false;
				colvarFacility.IsReadOnly = false;
				colvarFacility.DefaultSetting = @"";
				colvarFacility.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFacility);
				
				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.AnsiString;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = true;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);
				
				TableSchema.TableColumn colvarState = new TableSchema.TableColumn(schema);
				colvarState.ColumnName = "State";
				colvarState.DataType = DbType.AnsiString;
				colvarState.MaxLength = 2;
				colvarState.AutoIncrement = false;
				colvarState.IsNullable = true;
				colvarState.IsPrimaryKey = false;
				colvarState.IsForeignKey = false;
				colvarState.IsReadOnly = false;
				colvarState.DefaultSetting = @"";
				colvarState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarState);
				
				TableSchema.TableColumn colvarCountry = new TableSchema.TableColumn(schema);
				colvarCountry.ColumnName = "Country";
				colvarCountry.DataType = DbType.AnsiString;
				colvarCountry.MaxLength = 50;
				colvarCountry.AutoIncrement = false;
				colvarCountry.IsNullable = true;
				colvarCountry.IsPrimaryKey = false;
				colvarCountry.IsForeignKey = false;
				colvarCountry.IsReadOnly = false;
				colvarCountry.DefaultSetting = @"";
				colvarCountry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountry);
				
				TableSchema.TableColumn colvarNewConstr = new TableSchema.TableColumn(schema);
				colvarNewConstr.ColumnName = "NewConstr";
				colvarNewConstr.DataType = DbType.Boolean;
				colvarNewConstr.MaxLength = 0;
				colvarNewConstr.AutoIncrement = false;
				colvarNewConstr.IsNullable = false;
				colvarNewConstr.IsPrimaryKey = false;
				colvarNewConstr.IsForeignKey = false;
				colvarNewConstr.IsReadOnly = false;
				
						colvarNewConstr.DefaultSetting = @"((0))";
				colvarNewConstr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewConstr);
				
				TableSchema.TableColumn colvarFacilityUpgrade = new TableSchema.TableColumn(schema);
				colvarFacilityUpgrade.ColumnName = "FacilityUpgrade";
				colvarFacilityUpgrade.DataType = DbType.Boolean;
				colvarFacilityUpgrade.MaxLength = 0;
				colvarFacilityUpgrade.AutoIncrement = false;
				colvarFacilityUpgrade.IsNullable = false;
				colvarFacilityUpgrade.IsPrimaryKey = false;
				colvarFacilityUpgrade.IsForeignKey = false;
				colvarFacilityUpgrade.IsReadOnly = false;
				
						colvarFacilityUpgrade.DefaultSetting = @"((0))";
				colvarFacilityUpgrade.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFacilityUpgrade);
				
				TableSchema.TableColumn colvarSupplemental = new TableSchema.TableColumn(schema);
				colvarSupplemental.ColumnName = "Supplemental";
				colvarSupplemental.DataType = DbType.Boolean;
				colvarSupplemental.MaxLength = 0;
				colvarSupplemental.AutoIncrement = false;
				colvarSupplemental.IsNullable = false;
				colvarSupplemental.IsPrimaryKey = false;
				colvarSupplemental.IsForeignKey = false;
				colvarSupplemental.IsReadOnly = false;
				
						colvarSupplemental.DefaultSetting = @"((0))";
				colvarSupplemental.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSupplemental);
				
				TableSchema.TableColumn colvarOwnerRepName = new TableSchema.TableColumn(schema);
				colvarOwnerRepName.ColumnName = "OwnerRepName";
				colvarOwnerRepName.DataType = DbType.AnsiString;
				colvarOwnerRepName.MaxLength = 25;
				colvarOwnerRepName.AutoIncrement = false;
				colvarOwnerRepName.IsNullable = true;
				colvarOwnerRepName.IsPrimaryKey = false;
				colvarOwnerRepName.IsForeignKey = false;
				colvarOwnerRepName.IsReadOnly = false;
				colvarOwnerRepName.DefaultSetting = @"";
				colvarOwnerRepName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOwnerRepName);
				
				TableSchema.TableColumn colvarOwnerRepPhone = new TableSchema.TableColumn(schema);
				colvarOwnerRepPhone.ColumnName = "OwnerRepPhone";
				colvarOwnerRepPhone.DataType = DbType.AnsiString;
				colvarOwnerRepPhone.MaxLength = 25;
				colvarOwnerRepPhone.AutoIncrement = false;
				colvarOwnerRepPhone.IsNullable = true;
				colvarOwnerRepPhone.IsPrimaryKey = false;
				colvarOwnerRepPhone.IsForeignKey = false;
				colvarOwnerRepPhone.IsReadOnly = false;
				colvarOwnerRepPhone.DefaultSetting = @"";
				colvarOwnerRepPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOwnerRepPhone);
				
				TableSchema.TableColumn colvarOwnerRepEmail = new TableSchema.TableColumn(schema);
				colvarOwnerRepEmail.ColumnName = "OwnerRepEmail";
				colvarOwnerRepEmail.DataType = DbType.AnsiString;
				colvarOwnerRepEmail.MaxLength = 75;
				colvarOwnerRepEmail.AutoIncrement = false;
				colvarOwnerRepEmail.IsNullable = true;
				colvarOwnerRepEmail.IsPrimaryKey = false;
				colvarOwnerRepEmail.IsForeignKey = false;
				colvarOwnerRepEmail.IsReadOnly = false;
				colvarOwnerRepEmail.DefaultSetting = @"";
				colvarOwnerRepEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOwnerRepEmail);
				
				TableSchema.TableColumn colvarPhysicistName = new TableSchema.TableColumn(schema);
				colvarPhysicistName.ColumnName = "PhysicistName";
				colvarPhysicistName.DataType = DbType.AnsiString;
				colvarPhysicistName.MaxLength = 25;
				colvarPhysicistName.AutoIncrement = false;
				colvarPhysicistName.IsNullable = true;
				colvarPhysicistName.IsPrimaryKey = false;
				colvarPhysicistName.IsForeignKey = false;
				colvarPhysicistName.IsReadOnly = false;
				colvarPhysicistName.DefaultSetting = @"";
				colvarPhysicistName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhysicistName);
				
				TableSchema.TableColumn colvarPhysicistPhone = new TableSchema.TableColumn(schema);
				colvarPhysicistPhone.ColumnName = "PhysicistPhone";
				colvarPhysicistPhone.DataType = DbType.AnsiString;
				colvarPhysicistPhone.MaxLength = 25;
				colvarPhysicistPhone.AutoIncrement = false;
				colvarPhysicistPhone.IsNullable = true;
				colvarPhysicistPhone.IsPrimaryKey = false;
				colvarPhysicistPhone.IsForeignKey = false;
				colvarPhysicistPhone.IsReadOnly = false;
				colvarPhysicistPhone.DefaultSetting = @"";
				colvarPhysicistPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhysicistPhone);
				
				TableSchema.TableColumn colvarPhysicistEmail = new TableSchema.TableColumn(schema);
				colvarPhysicistEmail.ColumnName = "PhysicistEmail";
				colvarPhysicistEmail.DataType = DbType.AnsiString;
				colvarPhysicistEmail.MaxLength = 75;
				colvarPhysicistEmail.AutoIncrement = false;
				colvarPhysicistEmail.IsNullable = true;
				colvarPhysicistEmail.IsPrimaryKey = false;
				colvarPhysicistEmail.IsForeignKey = false;
				colvarPhysicistEmail.IsReadOnly = false;
				colvarPhysicistEmail.DefaultSetting = @"";
				colvarPhysicistEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhysicistEmail);
				
				TableSchema.TableColumn colvarOtherContactType = new TableSchema.TableColumn(schema);
				colvarOtherContactType.ColumnName = "OtherContactType";
				colvarOtherContactType.DataType = DbType.AnsiString;
				colvarOtherContactType.MaxLength = 25;
				colvarOtherContactType.AutoIncrement = false;
				colvarOtherContactType.IsNullable = true;
				colvarOtherContactType.IsPrimaryKey = false;
				colvarOtherContactType.IsForeignKey = false;
				colvarOtherContactType.IsReadOnly = false;
				colvarOtherContactType.DefaultSetting = @"";
				colvarOtherContactType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOtherContactType);
				
				TableSchema.TableColumn colvarOtherContactName = new TableSchema.TableColumn(schema);
				colvarOtherContactName.ColumnName = "OtherContactName";
				colvarOtherContactName.DataType = DbType.AnsiString;
				colvarOtherContactName.MaxLength = 25;
				colvarOtherContactName.AutoIncrement = false;
				colvarOtherContactName.IsNullable = true;
				colvarOtherContactName.IsPrimaryKey = false;
				colvarOtherContactName.IsForeignKey = false;
				colvarOtherContactName.IsReadOnly = false;
				colvarOtherContactName.DefaultSetting = @"";
				colvarOtherContactName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOtherContactName);
				
				TableSchema.TableColumn colvarOtherContactPhone = new TableSchema.TableColumn(schema);
				colvarOtherContactPhone.ColumnName = "OtherContactPhone";
				colvarOtherContactPhone.DataType = DbType.AnsiString;
				colvarOtherContactPhone.MaxLength = 25;
				colvarOtherContactPhone.AutoIncrement = false;
				colvarOtherContactPhone.IsNullable = true;
				colvarOtherContactPhone.IsPrimaryKey = false;
				colvarOtherContactPhone.IsForeignKey = false;
				colvarOtherContactPhone.IsReadOnly = false;
				colvarOtherContactPhone.DefaultSetting = @"";
				colvarOtherContactPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOtherContactPhone);
				
				TableSchema.TableColumn colvarOtherContactEmail = new TableSchema.TableColumn(schema);
				colvarOtherContactEmail.ColumnName = "OtherContactEmail";
				colvarOtherContactEmail.DataType = DbType.AnsiString;
				colvarOtherContactEmail.MaxLength = 75;
				colvarOtherContactEmail.AutoIncrement = false;
				colvarOtherContactEmail.IsNullable = true;
				colvarOtherContactEmail.IsPrimaryKey = false;
				colvarOtherContactEmail.IsForeignKey = false;
				colvarOtherContactEmail.IsReadOnly = false;
				colvarOtherContactEmail.DefaultSetting = @"";
				colvarOtherContactEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOtherContactEmail);
				
				TableSchema.TableColumn colvarProductInfo = new TableSchema.TableColumn(schema);
				colvarProductInfo.ColumnName = "ProductInfo";
				colvarProductInfo.DataType = DbType.Boolean;
				colvarProductInfo.MaxLength = 0;
				colvarProductInfo.AutoIncrement = false;
				colvarProductInfo.IsNullable = false;
				colvarProductInfo.IsPrimaryKey = false;
				colvarProductInfo.IsForeignKey = false;
				colvarProductInfo.IsReadOnly = false;
				
						colvarProductInfo.DefaultSetting = @"((0))";
				colvarProductInfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductInfo);
				
				TableSchema.TableColumn colvarRoomLayouts = new TableSchema.TableColumn(schema);
				colvarRoomLayouts.ColumnName = "RoomLayouts";
				colvarRoomLayouts.DataType = DbType.Boolean;
				colvarRoomLayouts.MaxLength = 0;
				colvarRoomLayouts.AutoIncrement = false;
				colvarRoomLayouts.IsNullable = false;
				colvarRoomLayouts.IsPrimaryKey = false;
				colvarRoomLayouts.IsForeignKey = false;
				colvarRoomLayouts.IsReadOnly = false;
				
						colvarRoomLayouts.DefaultSetting = @"((0))";
				colvarRoomLayouts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoomLayouts);
				
				TableSchema.TableColumn colvarConstructionDetails = new TableSchema.TableColumn(schema);
				colvarConstructionDetails.ColumnName = "ConstructionDetails";
				colvarConstructionDetails.DataType = DbType.Boolean;
				colvarConstructionDetails.MaxLength = 0;
				colvarConstructionDetails.AutoIncrement = false;
				colvarConstructionDetails.IsNullable = false;
				colvarConstructionDetails.IsPrimaryKey = false;
				colvarConstructionDetails.IsForeignKey = false;
				colvarConstructionDetails.IsReadOnly = false;
				
						colvarConstructionDetails.DefaultSetting = @"((0))";
				colvarConstructionDetails.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConstructionDetails);
				
				TableSchema.TableColumn colvarPhysicsReport = new TableSchema.TableColumn(schema);
				colvarPhysicsReport.ColumnName = "PhysicsReport";
				colvarPhysicsReport.DataType = DbType.Boolean;
				colvarPhysicsReport.MaxLength = 0;
				colvarPhysicsReport.AutoIncrement = false;
				colvarPhysicsReport.IsNullable = false;
				colvarPhysicsReport.IsPrimaryKey = false;
				colvarPhysicsReport.IsForeignKey = false;
				colvarPhysicsReport.IsReadOnly = false;
				
						colvarPhysicsReport.DefaultSetting = @"((0))";
				colvarPhysicsReport.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhysicsReport);
				
				TableSchema.TableColumn colvarBudgetEstimate = new TableSchema.TableColumn(schema);
				colvarBudgetEstimate.ColumnName = "BudgetEstimate";
				colvarBudgetEstimate.DataType = DbType.Boolean;
				colvarBudgetEstimate.MaxLength = 0;
				colvarBudgetEstimate.AutoIncrement = false;
				colvarBudgetEstimate.IsNullable = false;
				colvarBudgetEstimate.IsPrimaryKey = false;
				colvarBudgetEstimate.IsForeignKey = false;
				colvarBudgetEstimate.IsReadOnly = false;
				
						colvarBudgetEstimate.DefaultSetting = @"((0))";
				colvarBudgetEstimate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBudgetEstimate);
				
				TableSchema.TableColumn colvarMeetingRequested = new TableSchema.TableColumn(schema);
				colvarMeetingRequested.ColumnName = "MeetingRequested";
				colvarMeetingRequested.DataType = DbType.Boolean;
				colvarMeetingRequested.MaxLength = 0;
				colvarMeetingRequested.AutoIncrement = false;
				colvarMeetingRequested.IsNullable = false;
				colvarMeetingRequested.IsPrimaryKey = false;
				colvarMeetingRequested.IsForeignKey = false;
				colvarMeetingRequested.IsReadOnly = false;
				
						colvarMeetingRequested.DefaultSetting = @"((0))";
				colvarMeetingRequested.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeetingRequested);
				
				TableSchema.TableColumn colvarEntryDoors = new TableSchema.TableColumn(schema);
				colvarEntryDoors.ColumnName = "EntryDoors";
				colvarEntryDoors.DataType = DbType.Boolean;
				colvarEntryDoors.MaxLength = 0;
				colvarEntryDoors.AutoIncrement = false;
				colvarEntryDoors.IsNullable = false;
				colvarEntryDoors.IsPrimaryKey = false;
				colvarEntryDoors.IsForeignKey = false;
				colvarEntryDoors.IsReadOnly = false;
				
						colvarEntryDoors.DefaultSetting = @"((0))";
				colvarEntryDoors.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEntryDoors);
				
				TableSchema.TableColumn colvarAcceleratorPit = new TableSchema.TableColumn(schema);
				colvarAcceleratorPit.ColumnName = "AcceleratorPit";
				colvarAcceleratorPit.DataType = DbType.Boolean;
				colvarAcceleratorPit.MaxLength = 0;
				colvarAcceleratorPit.AutoIncrement = false;
				colvarAcceleratorPit.IsNullable = false;
				colvarAcceleratorPit.IsPrimaryKey = false;
				colvarAcceleratorPit.IsForeignKey = false;
				colvarAcceleratorPit.IsReadOnly = false;
				
						colvarAcceleratorPit.DefaultSetting = @"((0))";
				colvarAcceleratorPit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAcceleratorPit);
				
				TableSchema.TableColumn colvarFacilityDevelopment = new TableSchema.TableColumn(schema);
				colvarFacilityDevelopment.ColumnName = "FacilityDevelopment";
				colvarFacilityDevelopment.DataType = DbType.Boolean;
				colvarFacilityDevelopment.MaxLength = 0;
				colvarFacilityDevelopment.AutoIncrement = false;
				colvarFacilityDevelopment.IsNullable = false;
				colvarFacilityDevelopment.IsPrimaryKey = false;
				colvarFacilityDevelopment.IsForeignKey = false;
				colvarFacilityDevelopment.IsReadOnly = false;
				
						colvarFacilityDevelopment.DefaultSetting = @"((0))";
				colvarFacilityDevelopment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFacilityDevelopment);
				
				TableSchema.TableColumn colvarInteriorFinishes = new TableSchema.TableColumn(schema);
				colvarInteriorFinishes.ColumnName = "InteriorFinishes";
				colvarInteriorFinishes.DataType = DbType.Boolean;
				colvarInteriorFinishes.MaxLength = 0;
				colvarInteriorFinishes.AutoIncrement = false;
				colvarInteriorFinishes.IsNullable = false;
				colvarInteriorFinishes.IsPrimaryKey = false;
				colvarInteriorFinishes.IsForeignKey = false;
				colvarInteriorFinishes.IsReadOnly = false;
				
						colvarInteriorFinishes.DefaultSetting = @"((0))";
				colvarInteriorFinishes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInteriorFinishes);
				
				TableSchema.TableColumn colvarDuctShielding = new TableSchema.TableColumn(schema);
				colvarDuctShielding.ColumnName = "DuctShielding";
				colvarDuctShielding.DataType = DbType.Boolean;
				colvarDuctShielding.MaxLength = 0;
				colvarDuctShielding.AutoIncrement = false;
				colvarDuctShielding.IsNullable = false;
				colvarDuctShielding.IsPrimaryKey = false;
				colvarDuctShielding.IsForeignKey = false;
				colvarDuctShielding.IsReadOnly = false;
				
						colvarDuctShielding.DefaultSetting = @"((0))";
				colvarDuctShielding.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDuctShielding);
				
				TableSchema.TableColumn colvarFoundations = new TableSchema.TableColumn(schema);
				colvarFoundations.ColumnName = "Foundations";
				colvarFoundations.DataType = DbType.Boolean;
				colvarFoundations.MaxLength = 0;
				colvarFoundations.AutoIncrement = false;
				colvarFoundations.IsNullable = false;
				colvarFoundations.IsPrimaryKey = false;
				colvarFoundations.IsForeignKey = false;
				colvarFoundations.IsReadOnly = false;
				
						colvarFoundations.DefaultSetting = @"((0))";
				colvarFoundations.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFoundations);
				
				TableSchema.TableColumn colvarVroc = new TableSchema.TableColumn(schema);
				colvarVroc.ColumnName = "VROC";
				colvarVroc.DataType = DbType.Boolean;
				colvarVroc.MaxLength = 0;
				colvarVroc.AutoIncrement = false;
				colvarVroc.IsNullable = false;
				colvarVroc.IsPrimaryKey = false;
				colvarVroc.IsForeignKey = false;
				colvarVroc.IsReadOnly = false;
				
						colvarVroc.DefaultSetting = @"((0))";
				colvarVroc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVroc);
				
				TableSchema.TableColumn colvarQuantum = new TableSchema.TableColumn(schema);
				colvarQuantum.ColumnName = "QUANTUM";
				colvarQuantum.DataType = DbType.Boolean;
				colvarQuantum.MaxLength = 0;
				colvarQuantum.AutoIncrement = false;
				colvarQuantum.IsNullable = false;
				colvarQuantum.IsPrimaryKey = false;
				colvarQuantum.IsForeignKey = false;
				colvarQuantum.IsReadOnly = false;
				
						colvarQuantum.DefaultSetting = @"((0))";
				colvarQuantum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantum);
				
				TableSchema.TableColumn colvarConstructionStartDate = new TableSchema.TableColumn(schema);
				colvarConstructionStartDate.ColumnName = "ConstructionStartDate";
				colvarConstructionStartDate.DataType = DbType.DateTime;
				colvarConstructionStartDate.MaxLength = 0;
				colvarConstructionStartDate.AutoIncrement = false;
				colvarConstructionStartDate.IsNullable = true;
				colvarConstructionStartDate.IsPrimaryKey = false;
				colvarConstructionStartDate.IsForeignKey = false;
				colvarConstructionStartDate.IsReadOnly = false;
				colvarConstructionStartDate.DefaultSetting = @"";
				colvarConstructionStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConstructionStartDate);
				
				TableSchema.TableColumn colvarMachineDelivery = new TableSchema.TableColumn(schema);
				colvarMachineDelivery.ColumnName = "MachineDelivery";
				colvarMachineDelivery.DataType = DbType.DateTime;
				colvarMachineDelivery.MaxLength = 0;
				colvarMachineDelivery.AutoIncrement = false;
				colvarMachineDelivery.IsNullable = true;
				colvarMachineDelivery.IsPrimaryKey = false;
				colvarMachineDelivery.IsForeignKey = false;
				colvarMachineDelivery.IsReadOnly = false;
				colvarMachineDelivery.DefaultSetting = @"";
				colvarMachineDelivery.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMachineDelivery);
				
				TableSchema.TableColumn colvarFoundationInstall = new TableSchema.TableColumn(schema);
				colvarFoundationInstall.ColumnName = "FoundationInstall";
				colvarFoundationInstall.DataType = DbType.DateTime;
				colvarFoundationInstall.MaxLength = 0;
				colvarFoundationInstall.AutoIncrement = false;
				colvarFoundationInstall.IsNullable = true;
				colvarFoundationInstall.IsPrimaryKey = false;
				colvarFoundationInstall.IsForeignKey = false;
				colvarFoundationInstall.IsReadOnly = false;
				colvarFoundationInstall.DefaultSetting = @"";
				colvarFoundationInstall.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFoundationInstall);
				
				TableSchema.TableColumn colvarFirstTreatmentDate = new TableSchema.TableColumn(schema);
				colvarFirstTreatmentDate.ColumnName = "FirstTreatmentDate";
				colvarFirstTreatmentDate.DataType = DbType.DateTime;
				colvarFirstTreatmentDate.MaxLength = 0;
				colvarFirstTreatmentDate.AutoIncrement = false;
				colvarFirstTreatmentDate.IsNullable = true;
				colvarFirstTreatmentDate.IsPrimaryKey = false;
				colvarFirstTreatmentDate.IsForeignKey = false;
				colvarFirstTreatmentDate.IsReadOnly = false;
				colvarFirstTreatmentDate.DefaultSetting = @"";
				colvarFirstTreatmentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstTreatmentDate);
				
				TableSchema.TableColumn colvarRegulatoryDesignRequirements = new TableSchema.TableColumn(schema);
				colvarRegulatoryDesignRequirements.ColumnName = "RegulatoryDesignRequirements";
				colvarRegulatoryDesignRequirements.DataType = DbType.AnsiString;
				colvarRegulatoryDesignRequirements.MaxLength = 25;
				colvarRegulatoryDesignRequirements.AutoIncrement = false;
				colvarRegulatoryDesignRequirements.IsNullable = true;
				colvarRegulatoryDesignRequirements.IsPrimaryKey = false;
				colvarRegulatoryDesignRequirements.IsForeignKey = false;
				colvarRegulatoryDesignRequirements.IsReadOnly = false;
				colvarRegulatoryDesignRequirements.DefaultSetting = @"";
				colvarRegulatoryDesignRequirements.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegulatoryDesignRequirements);
				
				TableSchema.TableColumn colvarRegulatoryDesignRequirementOther = new TableSchema.TableColumn(schema);
				colvarRegulatoryDesignRequirementOther.ColumnName = "RegulatoryDesignRequirementOther";
				colvarRegulatoryDesignRequirementOther.DataType = DbType.AnsiString;
				colvarRegulatoryDesignRequirementOther.MaxLength = -1;
				colvarRegulatoryDesignRequirementOther.AutoIncrement = false;
				colvarRegulatoryDesignRequirementOther.IsNullable = true;
				colvarRegulatoryDesignRequirementOther.IsPrimaryKey = false;
				colvarRegulatoryDesignRequirementOther.IsForeignKey = false;
				colvarRegulatoryDesignRequirementOther.IsReadOnly = false;
				colvarRegulatoryDesignRequirementOther.DefaultSetting = @"";
				colvarRegulatoryDesignRequirementOther.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegulatoryDesignRequirementOther);
				
				TableSchema.TableColumn colvarOtherRegDesignReqPublic = new TableSchema.TableColumn(schema);
				colvarOtherRegDesignReqPublic.ColumnName = "OtherRegDesignReqPublic";
				colvarOtherRegDesignReqPublic.DataType = DbType.AnsiString;
				colvarOtherRegDesignReqPublic.MaxLength = 25;
				colvarOtherRegDesignReqPublic.AutoIncrement = false;
				colvarOtherRegDesignReqPublic.IsNullable = true;
				colvarOtherRegDesignReqPublic.IsPrimaryKey = false;
				colvarOtherRegDesignReqPublic.IsForeignKey = false;
				colvarOtherRegDesignReqPublic.IsReadOnly = false;
				colvarOtherRegDesignReqPublic.DefaultSetting = @"";
				colvarOtherRegDesignReqPublic.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOtherRegDesignReqPublic);
				
				TableSchema.TableColumn colvarOtherRegDesignReqControlled = new TableSchema.TableColumn(schema);
				colvarOtherRegDesignReqControlled.ColumnName = "OtherRegDesignReqControlled";
				colvarOtherRegDesignReqControlled.DataType = DbType.AnsiString;
				colvarOtherRegDesignReqControlled.MaxLength = 25;
				colvarOtherRegDesignReqControlled.AutoIncrement = false;
				colvarOtherRegDesignReqControlled.IsNullable = true;
				colvarOtherRegDesignReqControlled.IsPrimaryKey = false;
				colvarOtherRegDesignReqControlled.IsForeignKey = false;
				colvarOtherRegDesignReqControlled.IsReadOnly = false;
				colvarOtherRegDesignReqControlled.DefaultSetting = @"";
				colvarOtherRegDesignReqControlled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOtherRegDesignReqControlled);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Internal"].AddSchema("Prospectus",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("ExternalID")]
		[Bindable(true)]
		public int? ExternalID 
		{
			get { return GetColumnValue<int?>(Columns.ExternalID); }
			set { SetColumnValue(Columns.ExternalID, value); }
		}
		  
		[XmlAttribute("Facility")]
		[Bindable(true)]
		public string Facility 
		{
			get { return GetColumnValue<string>(Columns.Facility); }
			set { SetColumnValue(Columns.Facility, value); }
		}
		  
		[XmlAttribute("City")]
		[Bindable(true)]
		public string City 
		{
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		  
		[XmlAttribute("State")]
		[Bindable(true)]
		public string State 
		{
			get { return GetColumnValue<string>(Columns.State); }
			set { SetColumnValue(Columns.State, value); }
		}
		  
		[XmlAttribute("Country")]
		[Bindable(true)]
		public string Country 
		{
			get { return GetColumnValue<string>(Columns.Country); }
			set { SetColumnValue(Columns.Country, value); }
		}
		  
		[XmlAttribute("NewConstr")]
		[Bindable(true)]
		public bool NewConstr 
		{
			get { return GetColumnValue<bool>(Columns.NewConstr); }
			set { SetColumnValue(Columns.NewConstr, value); }
		}
		  
		[XmlAttribute("FacilityUpgrade")]
		[Bindable(true)]
		public bool FacilityUpgrade 
		{
			get { return GetColumnValue<bool>(Columns.FacilityUpgrade); }
			set { SetColumnValue(Columns.FacilityUpgrade, value); }
		}
		  
		[XmlAttribute("Supplemental")]
		[Bindable(true)]
		public bool Supplemental 
		{
			get { return GetColumnValue<bool>(Columns.Supplemental); }
			set { SetColumnValue(Columns.Supplemental, value); }
		}
		  
		[XmlAttribute("OwnerRepName")]
		[Bindable(true)]
		public string OwnerRepName 
		{
			get { return GetColumnValue<string>(Columns.OwnerRepName); }
			set { SetColumnValue(Columns.OwnerRepName, value); }
		}
		  
		[XmlAttribute("OwnerRepPhone")]
		[Bindable(true)]
		public string OwnerRepPhone 
		{
			get { return GetColumnValue<string>(Columns.OwnerRepPhone); }
			set { SetColumnValue(Columns.OwnerRepPhone, value); }
		}
		  
		[XmlAttribute("OwnerRepEmail")]
		[Bindable(true)]
		public string OwnerRepEmail 
		{
			get { return GetColumnValue<string>(Columns.OwnerRepEmail); }
			set { SetColumnValue(Columns.OwnerRepEmail, value); }
		}
		  
		[XmlAttribute("PhysicistName")]
		[Bindable(true)]
		public string PhysicistName 
		{
			get { return GetColumnValue<string>(Columns.PhysicistName); }
			set { SetColumnValue(Columns.PhysicistName, value); }
		}
		  
		[XmlAttribute("PhysicistPhone")]
		[Bindable(true)]
		public string PhysicistPhone 
		{
			get { return GetColumnValue<string>(Columns.PhysicistPhone); }
			set { SetColumnValue(Columns.PhysicistPhone, value); }
		}
		  
		[XmlAttribute("PhysicistEmail")]
		[Bindable(true)]
		public string PhysicistEmail 
		{
			get { return GetColumnValue<string>(Columns.PhysicistEmail); }
			set { SetColumnValue(Columns.PhysicistEmail, value); }
		}
		  
		[XmlAttribute("OtherContactType")]
		[Bindable(true)]
		public string OtherContactType 
		{
			get { return GetColumnValue<string>(Columns.OtherContactType); }
			set { SetColumnValue(Columns.OtherContactType, value); }
		}
		  
		[XmlAttribute("OtherContactName")]
		[Bindable(true)]
		public string OtherContactName 
		{
			get { return GetColumnValue<string>(Columns.OtherContactName); }
			set { SetColumnValue(Columns.OtherContactName, value); }
		}
		  
		[XmlAttribute("OtherContactPhone")]
		[Bindable(true)]
		public string OtherContactPhone 
		{
			get { return GetColumnValue<string>(Columns.OtherContactPhone); }
			set { SetColumnValue(Columns.OtherContactPhone, value); }
		}
		  
		[XmlAttribute("OtherContactEmail")]
		[Bindable(true)]
		public string OtherContactEmail 
		{
			get { return GetColumnValue<string>(Columns.OtherContactEmail); }
			set { SetColumnValue(Columns.OtherContactEmail, value); }
		}
		  
		[XmlAttribute("ProductInfo")]
		[Bindable(true)]
		public bool ProductInfo 
		{
			get { return GetColumnValue<bool>(Columns.ProductInfo); }
			set { SetColumnValue(Columns.ProductInfo, value); }
		}
		  
		[XmlAttribute("RoomLayouts")]
		[Bindable(true)]
		public bool RoomLayouts 
		{
			get { return GetColumnValue<bool>(Columns.RoomLayouts); }
			set { SetColumnValue(Columns.RoomLayouts, value); }
		}
		  
		[XmlAttribute("ConstructionDetails")]
		[Bindable(true)]
		public bool ConstructionDetails 
		{
			get { return GetColumnValue<bool>(Columns.ConstructionDetails); }
			set { SetColumnValue(Columns.ConstructionDetails, value); }
		}
		  
		[XmlAttribute("PhysicsReport")]
		[Bindable(true)]
		public bool PhysicsReport 
		{
			get { return GetColumnValue<bool>(Columns.PhysicsReport); }
			set { SetColumnValue(Columns.PhysicsReport, value); }
		}
		  
		[XmlAttribute("BudgetEstimate")]
		[Bindable(true)]
		public bool BudgetEstimate 
		{
			get { return GetColumnValue<bool>(Columns.BudgetEstimate); }
			set { SetColumnValue(Columns.BudgetEstimate, value); }
		}
		  
		[XmlAttribute("MeetingRequested")]
		[Bindable(true)]
		public bool MeetingRequested 
		{
			get { return GetColumnValue<bool>(Columns.MeetingRequested); }
			set { SetColumnValue(Columns.MeetingRequested, value); }
		}
		  
		[XmlAttribute("EntryDoors")]
		[Bindable(true)]
		public bool EntryDoors 
		{
			get { return GetColumnValue<bool>(Columns.EntryDoors); }
			set { SetColumnValue(Columns.EntryDoors, value); }
		}
		  
		[XmlAttribute("AcceleratorPit")]
		[Bindable(true)]
		public bool AcceleratorPit 
		{
			get { return GetColumnValue<bool>(Columns.AcceleratorPit); }
			set { SetColumnValue(Columns.AcceleratorPit, value); }
		}
		  
		[XmlAttribute("FacilityDevelopment")]
		[Bindable(true)]
		public bool FacilityDevelopment 
		{
			get { return GetColumnValue<bool>(Columns.FacilityDevelopment); }
			set { SetColumnValue(Columns.FacilityDevelopment, value); }
		}
		  
		[XmlAttribute("InteriorFinishes")]
		[Bindable(true)]
		public bool InteriorFinishes 
		{
			get { return GetColumnValue<bool>(Columns.InteriorFinishes); }
			set { SetColumnValue(Columns.InteriorFinishes, value); }
		}
		  
		[XmlAttribute("DuctShielding")]
		[Bindable(true)]
		public bool DuctShielding 
		{
			get { return GetColumnValue<bool>(Columns.DuctShielding); }
			set { SetColumnValue(Columns.DuctShielding, value); }
		}
		  
		[XmlAttribute("Foundations")]
		[Bindable(true)]
		public bool Foundations 
		{
			get { return GetColumnValue<bool>(Columns.Foundations); }
			set { SetColumnValue(Columns.Foundations, value); }
		}
		  
		[XmlAttribute("Vroc")]
		[Bindable(true)]
		public bool Vroc 
		{
			get { return GetColumnValue<bool>(Columns.Vroc); }
			set { SetColumnValue(Columns.Vroc, value); }
		}
		  
		[XmlAttribute("Quantum")]
		[Bindable(true)]
		public bool Quantum 
		{
			get { return GetColumnValue<bool>(Columns.Quantum); }
			set { SetColumnValue(Columns.Quantum, value); }
		}
		  
		[XmlAttribute("ConstructionStartDate")]
		[Bindable(true)]
		public DateTime? ConstructionStartDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ConstructionStartDate); }
			set { SetColumnValue(Columns.ConstructionStartDate, value); }
		}
		  
		[XmlAttribute("MachineDelivery")]
		[Bindable(true)]
		public DateTime? MachineDelivery 
		{
			get { return GetColumnValue<DateTime?>(Columns.MachineDelivery); }
			set { SetColumnValue(Columns.MachineDelivery, value); }
		}
		  
		[XmlAttribute("FoundationInstall")]
		[Bindable(true)]
		public DateTime? FoundationInstall 
		{
			get { return GetColumnValue<DateTime?>(Columns.FoundationInstall); }
			set { SetColumnValue(Columns.FoundationInstall, value); }
		}
		  
		[XmlAttribute("FirstTreatmentDate")]
		[Bindable(true)]
		public DateTime? FirstTreatmentDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.FirstTreatmentDate); }
			set { SetColumnValue(Columns.FirstTreatmentDate, value); }
		}
		  
		[XmlAttribute("RegulatoryDesignRequirements")]
		[Bindable(true)]
		public string RegulatoryDesignRequirements 
		{
			get { return GetColumnValue<string>(Columns.RegulatoryDesignRequirements); }
			set { SetColumnValue(Columns.RegulatoryDesignRequirements, value); }
		}
		  
		[XmlAttribute("RegulatoryDesignRequirementOther")]
		[Bindable(true)]
		public string RegulatoryDesignRequirementOther 
		{
			get { return GetColumnValue<string>(Columns.RegulatoryDesignRequirementOther); }
			set { SetColumnValue(Columns.RegulatoryDesignRequirementOther, value); }
		}
		  
		[XmlAttribute("OtherRegDesignReqPublic")]
		[Bindable(true)]
		public string OtherRegDesignReqPublic 
		{
			get { return GetColumnValue<string>(Columns.OtherRegDesignReqPublic); }
			set { SetColumnValue(Columns.OtherRegDesignReqPublic, value); }
		}
		  
		[XmlAttribute("OtherRegDesignReqControlled")]
		[Bindable(true)]
		public string OtherRegDesignReqControlled 
		{
			get { return GetColumnValue<string>(Columns.OtherRegDesignReqControlled); }
			set { SetColumnValue(Columns.OtherRegDesignReqControlled, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varExternalID,string varFacility,string varCity,string varState,string varCountry,bool varNewConstr,bool varFacilityUpgrade,bool varSupplemental,string varOwnerRepName,string varOwnerRepPhone,string varOwnerRepEmail,string varPhysicistName,string varPhysicistPhone,string varPhysicistEmail,string varOtherContactType,string varOtherContactName,string varOtherContactPhone,string varOtherContactEmail,bool varProductInfo,bool varRoomLayouts,bool varConstructionDetails,bool varPhysicsReport,bool varBudgetEstimate,bool varMeetingRequested,bool varEntryDoors,bool varAcceleratorPit,bool varFacilityDevelopment,bool varInteriorFinishes,bool varDuctShielding,bool varFoundations,bool varVroc,bool varQuantum,DateTime? varConstructionStartDate,DateTime? varMachineDelivery,DateTime? varFoundationInstall,DateTime? varFirstTreatmentDate,string varRegulatoryDesignRequirements,string varRegulatoryDesignRequirementOther,string varOtherRegDesignReqPublic,string varOtherRegDesignReqControlled)
		{
			Prospectu item = new Prospectu();
			
			item.ExternalID = varExternalID;
			
			item.Facility = varFacility;
			
			item.City = varCity;
			
			item.State = varState;
			
			item.Country = varCountry;
			
			item.NewConstr = varNewConstr;
			
			item.FacilityUpgrade = varFacilityUpgrade;
			
			item.Supplemental = varSupplemental;
			
			item.OwnerRepName = varOwnerRepName;
			
			item.OwnerRepPhone = varOwnerRepPhone;
			
			item.OwnerRepEmail = varOwnerRepEmail;
			
			item.PhysicistName = varPhysicistName;
			
			item.PhysicistPhone = varPhysicistPhone;
			
			item.PhysicistEmail = varPhysicistEmail;
			
			item.OtherContactType = varOtherContactType;
			
			item.OtherContactName = varOtherContactName;
			
			item.OtherContactPhone = varOtherContactPhone;
			
			item.OtherContactEmail = varOtherContactEmail;
			
			item.ProductInfo = varProductInfo;
			
			item.RoomLayouts = varRoomLayouts;
			
			item.ConstructionDetails = varConstructionDetails;
			
			item.PhysicsReport = varPhysicsReport;
			
			item.BudgetEstimate = varBudgetEstimate;
			
			item.MeetingRequested = varMeetingRequested;
			
			item.EntryDoors = varEntryDoors;
			
			item.AcceleratorPit = varAcceleratorPit;
			
			item.FacilityDevelopment = varFacilityDevelopment;
			
			item.InteriorFinishes = varInteriorFinishes;
			
			item.DuctShielding = varDuctShielding;
			
			item.Foundations = varFoundations;
			
			item.Vroc = varVroc;
			
			item.Quantum = varQuantum;
			
			item.ConstructionStartDate = varConstructionStartDate;
			
			item.MachineDelivery = varMachineDelivery;
			
			item.FoundationInstall = varFoundationInstall;
			
			item.FirstTreatmentDate = varFirstTreatmentDate;
			
			item.RegulatoryDesignRequirements = varRegulatoryDesignRequirements;
			
			item.RegulatoryDesignRequirementOther = varRegulatoryDesignRequirementOther;
			
			item.OtherRegDesignReqPublic = varOtherRegDesignReqPublic;
			
			item.OtherRegDesignReqControlled = varOtherRegDesignReqControlled;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varExternalID,string varFacility,string varCity,string varState,string varCountry,bool varNewConstr,bool varFacilityUpgrade,bool varSupplemental,string varOwnerRepName,string varOwnerRepPhone,string varOwnerRepEmail,string varPhysicistName,string varPhysicistPhone,string varPhysicistEmail,string varOtherContactType,string varOtherContactName,string varOtherContactPhone,string varOtherContactEmail,bool varProductInfo,bool varRoomLayouts,bool varConstructionDetails,bool varPhysicsReport,bool varBudgetEstimate,bool varMeetingRequested,bool varEntryDoors,bool varAcceleratorPit,bool varFacilityDevelopment,bool varInteriorFinishes,bool varDuctShielding,bool varFoundations,bool varVroc,bool varQuantum,DateTime? varConstructionStartDate,DateTime? varMachineDelivery,DateTime? varFoundationInstall,DateTime? varFirstTreatmentDate,string varRegulatoryDesignRequirements,string varRegulatoryDesignRequirementOther,string varOtherRegDesignReqPublic,string varOtherRegDesignReqControlled)
		{
			Prospectu item = new Prospectu();
			
				item.Id = varId;
			
				item.ExternalID = varExternalID;
			
				item.Facility = varFacility;
			
				item.City = varCity;
			
				item.State = varState;
			
				item.Country = varCountry;
			
				item.NewConstr = varNewConstr;
			
				item.FacilityUpgrade = varFacilityUpgrade;
			
				item.Supplemental = varSupplemental;
			
				item.OwnerRepName = varOwnerRepName;
			
				item.OwnerRepPhone = varOwnerRepPhone;
			
				item.OwnerRepEmail = varOwnerRepEmail;
			
				item.PhysicistName = varPhysicistName;
			
				item.PhysicistPhone = varPhysicistPhone;
			
				item.PhysicistEmail = varPhysicistEmail;
			
				item.OtherContactType = varOtherContactType;
			
				item.OtherContactName = varOtherContactName;
			
				item.OtherContactPhone = varOtherContactPhone;
			
				item.OtherContactEmail = varOtherContactEmail;
			
				item.ProductInfo = varProductInfo;
			
				item.RoomLayouts = varRoomLayouts;
			
				item.ConstructionDetails = varConstructionDetails;
			
				item.PhysicsReport = varPhysicsReport;
			
				item.BudgetEstimate = varBudgetEstimate;
			
				item.MeetingRequested = varMeetingRequested;
			
				item.EntryDoors = varEntryDoors;
			
				item.AcceleratorPit = varAcceleratorPit;
			
				item.FacilityDevelopment = varFacilityDevelopment;
			
				item.InteriorFinishes = varInteriorFinishes;
			
				item.DuctShielding = varDuctShielding;
			
				item.Foundations = varFoundations;
			
				item.Vroc = varVroc;
			
				item.Quantum = varQuantum;
			
				item.ConstructionStartDate = varConstructionStartDate;
			
				item.MachineDelivery = varMachineDelivery;
			
				item.FoundationInstall = varFoundationInstall;
			
				item.FirstTreatmentDate = varFirstTreatmentDate;
			
				item.RegulatoryDesignRequirements = varRegulatoryDesignRequirements;
			
				item.RegulatoryDesignRequirementOther = varRegulatoryDesignRequirementOther;
			
				item.OtherRegDesignReqPublic = varOtherRegDesignReqPublic;
			
				item.OtherRegDesignReqControlled = varOtherRegDesignReqControlled;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ExternalIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FacilityColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CityColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn StateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NewConstrColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn FacilityUpgradeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SupplementalColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn OwnerRepNameColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn OwnerRepPhoneColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn OwnerRepEmailColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn PhysicistNameColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn PhysicistPhoneColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn PhysicistEmailColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn OtherContactTypeColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn OtherContactNameColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn OtherContactPhoneColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn OtherContactEmailColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ProductInfoColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn RoomLayoutsColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ConstructionDetailsColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn PhysicsReportColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn BudgetEstimateColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn MeetingRequestedColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn EntryDoorsColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn AcceleratorPitColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn FacilityDevelopmentColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn InteriorFinishesColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn DuctShieldingColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn FoundationsColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn VrocColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn QuantumColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn ConstructionStartDateColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn MachineDeliveryColumn
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        public static TableSchema.TableColumn FoundationInstallColumn
        {
            get { return Schema.Columns[35]; }
        }
        
        
        
        public static TableSchema.TableColumn FirstTreatmentDateColumn
        {
            get { return Schema.Columns[36]; }
        }
        
        
        
        public static TableSchema.TableColumn RegulatoryDesignRequirementsColumn
        {
            get { return Schema.Columns[37]; }
        }
        
        
        
        public static TableSchema.TableColumn RegulatoryDesignRequirementOtherColumn
        {
            get { return Schema.Columns[38]; }
        }
        
        
        
        public static TableSchema.TableColumn OtherRegDesignReqPublicColumn
        {
            get { return Schema.Columns[39]; }
        }
        
        
        
        public static TableSchema.TableColumn OtherRegDesignReqControlledColumn
        {
            get { return Schema.Columns[40]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string ExternalID = @"ExternalID";
			 public static string Facility = @"Facility";
			 public static string City = @"City";
			 public static string State = @"State";
			 public static string Country = @"Country";
			 public static string NewConstr = @"NewConstr";
			 public static string FacilityUpgrade = @"FacilityUpgrade";
			 public static string Supplemental = @"Supplemental";
			 public static string OwnerRepName = @"OwnerRepName";
			 public static string OwnerRepPhone = @"OwnerRepPhone";
			 public static string OwnerRepEmail = @"OwnerRepEmail";
			 public static string PhysicistName = @"PhysicistName";
			 public static string PhysicistPhone = @"PhysicistPhone";
			 public static string PhysicistEmail = @"PhysicistEmail";
			 public static string OtherContactType = @"OtherContactType";
			 public static string OtherContactName = @"OtherContactName";
			 public static string OtherContactPhone = @"OtherContactPhone";
			 public static string OtherContactEmail = @"OtherContactEmail";
			 public static string ProductInfo = @"ProductInfo";
			 public static string RoomLayouts = @"RoomLayouts";
			 public static string ConstructionDetails = @"ConstructionDetails";
			 public static string PhysicsReport = @"PhysicsReport";
			 public static string BudgetEstimate = @"BudgetEstimate";
			 public static string MeetingRequested = @"MeetingRequested";
			 public static string EntryDoors = @"EntryDoors";
			 public static string AcceleratorPit = @"AcceleratorPit";
			 public static string FacilityDevelopment = @"FacilityDevelopment";
			 public static string InteriorFinishes = @"InteriorFinishes";
			 public static string DuctShielding = @"DuctShielding";
			 public static string Foundations = @"Foundations";
			 public static string Vroc = @"VROC";
			 public static string Quantum = @"QUANTUM";
			 public static string ConstructionStartDate = @"ConstructionStartDate";
			 public static string MachineDelivery = @"MachineDelivery";
			 public static string FoundationInstall = @"FoundationInstall";
			 public static string FirstTreatmentDate = @"FirstTreatmentDate";
			 public static string RegulatoryDesignRequirements = @"RegulatoryDesignRequirements";
			 public static string RegulatoryDesignRequirementOther = @"RegulatoryDesignRequirementOther";
			 public static string OtherRegDesignReqPublic = @"OtherRegDesignReqPublic";
			 public static string OtherRegDesignReqControlled = @"OtherRegDesignReqControlled";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
