using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the EstimateItem class.
	/// </summary>
    [Serializable]
	public partial class EstimateItemCollection : ActiveList<EstimateItem, EstimateItemCollection>
	{	   
		public EstimateItemCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>EstimateItemCollection</returns>
		public EstimateItemCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                EstimateItem o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the EstimateItems table.
	/// </summary>
	[Serializable]
	public partial class EstimateItem : ActiveRecord<EstimateItem>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public EstimateItem()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public EstimateItem(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public EstimateItem(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public EstimateItem(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("EstimateItems", TableType.Table, DataService.GetInstance("Internal"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarEstimateID = new TableSchema.TableColumn(schema);
				colvarEstimateID.ColumnName = "EstimateID";
				colvarEstimateID.DataType = DbType.Int32;
				colvarEstimateID.MaxLength = 0;
				colvarEstimateID.AutoIncrement = false;
				colvarEstimateID.IsNullable = false;
				colvarEstimateID.IsPrimaryKey = false;
				colvarEstimateID.IsForeignKey = false;
				colvarEstimateID.IsReadOnly = false;
				colvarEstimateID.DefaultSetting = @"";
				colvarEstimateID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateID);
				
				TableSchema.TableColumn colvarItemType = new TableSchema.TableColumn(schema);
				colvarItemType.ColumnName = "ItemType";
				colvarItemType.DataType = DbType.AnsiString;
				colvarItemType.MaxLength = 25;
				colvarItemType.AutoIncrement = false;
				colvarItemType.IsNullable = false;
				colvarItemType.IsPrimaryKey = false;
				colvarItemType.IsForeignKey = false;
				colvarItemType.IsReadOnly = false;
				colvarItemType.DefaultSetting = @"";
				colvarItemType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemType);
				
				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = false;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);
				
				TableSchema.TableColumn colvarStyle = new TableSchema.TableColumn(schema);
				colvarStyle.ColumnName = "Style";
				colvarStyle.DataType = DbType.AnsiString;
				colvarStyle.MaxLength = 50;
				colvarStyle.AutoIncrement = false;
				colvarStyle.IsNullable = true;
				colvarStyle.IsPrimaryKey = false;
				colvarStyle.IsForeignKey = false;
				colvarStyle.IsReadOnly = false;
				colvarStyle.DefaultSetting = @"";
				colvarStyle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStyle);
				
				TableSchema.TableColumn colvarDisplayText = new TableSchema.TableColumn(schema);
				colvarDisplayText.ColumnName = "DisplayText";
				colvarDisplayText.DataType = DbType.AnsiString;
				colvarDisplayText.MaxLength = 50;
				colvarDisplayText.AutoIncrement = false;
				colvarDisplayText.IsNullable = false;
				colvarDisplayText.IsPrimaryKey = false;
				colvarDisplayText.IsForeignKey = false;
				colvarDisplayText.IsReadOnly = false;
				colvarDisplayText.DefaultSetting = @"";
				colvarDisplayText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDisplayText);
				
				TableSchema.TableColumn colvarSize = new TableSchema.TableColumn(schema);
				colvarSize.ColumnName = "Size";
				colvarSize.DataType = DbType.AnsiString;
				colvarSize.MaxLength = 10;
				colvarSize.AutoIncrement = false;
				colvarSize.IsNullable = true;
				colvarSize.IsPrimaryKey = false;
				colvarSize.IsForeignKey = false;
				colvarSize.IsReadOnly = false;
				colvarSize.DefaultSetting = @"";
				colvarSize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSize);
				
				TableSchema.TableColumn colvarEntry = new TableSchema.TableColumn(schema);
				colvarEntry.ColumnName = "Entry";
				colvarEntry.DataType = DbType.AnsiString;
				colvarEntry.MaxLength = 10;
				colvarEntry.AutoIncrement = false;
				colvarEntry.IsNullable = true;
				colvarEntry.IsPrimaryKey = false;
				colvarEntry.IsForeignKey = false;
				colvarEntry.IsReadOnly = false;
				colvarEntry.DefaultSetting = @"";
				colvarEntry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEntry);
				
				TableSchema.TableColumn colvarType = new TableSchema.TableColumn(schema);
				colvarType.ColumnName = "Type";
				colvarType.DataType = DbType.AnsiString;
				colvarType.MaxLength = 25;
				colvarType.AutoIncrement = false;
				colvarType.IsNullable = true;
				colvarType.IsPrimaryKey = false;
				colvarType.IsForeignKey = false;
				colvarType.IsReadOnly = false;
				colvarType.DefaultSetting = @"";
				colvarType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarType);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Internal"].AddSchema("EstimateItems",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("EstimateID")]
		[Bindable(true)]
		public int EstimateID 
		{
			get { return GetColumnValue<int>(Columns.EstimateID); }
			set { SetColumnValue(Columns.EstimateID, value); }
		}
		  
		[XmlAttribute("ItemType")]
		[Bindable(true)]
		public string ItemType 
		{
			get { return GetColumnValue<string>(Columns.ItemType); }
			set { SetColumnValue(Columns.ItemType, value); }
		}
		  
		[XmlAttribute("Quantity")]
		[Bindable(true)]
		public int Quantity 
		{
			get { return GetColumnValue<int>(Columns.Quantity); }
			set { SetColumnValue(Columns.Quantity, value); }
		}
		  
		[XmlAttribute("Style")]
		[Bindable(true)]
		public string Style 
		{
			get { return GetColumnValue<string>(Columns.Style); }
			set { SetColumnValue(Columns.Style, value); }
		}
		  
		[XmlAttribute("DisplayText")]
		[Bindable(true)]
		public string DisplayText 
		{
			get { return GetColumnValue<string>(Columns.DisplayText); }
			set { SetColumnValue(Columns.DisplayText, value); }
		}
		  
		[XmlAttribute("Size")]
		[Bindable(true)]
		public string Size 
		{
			get { return GetColumnValue<string>(Columns.Size); }
			set { SetColumnValue(Columns.Size, value); }
		}
		  
		[XmlAttribute("Entry")]
		[Bindable(true)]
		public string Entry 
		{
			get { return GetColumnValue<string>(Columns.Entry); }
			set { SetColumnValue(Columns.Entry, value); }
		}
		  
		[XmlAttribute("Type")]
		[Bindable(true)]
		public string Type 
		{
			get { return GetColumnValue<string>(Columns.Type); }
			set { SetColumnValue(Columns.Type, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varEstimateID,string varItemType,int varQuantity,string varStyle,string varDisplayText,string varSize,string varEntry,string varType)
		{
			EstimateItem item = new EstimateItem();
			
			item.EstimateID = varEstimateID;
			
			item.ItemType = varItemType;
			
			item.Quantity = varQuantity;
			
			item.Style = varStyle;
			
			item.DisplayText = varDisplayText;
			
			item.Size = varSize;
			
			item.Entry = varEntry;
			
			item.Type = varType;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int varEstimateID,string varItemType,int varQuantity,string varStyle,string varDisplayText,string varSize,string varEntry,string varType)
		{
			EstimateItem item = new EstimateItem();
			
				item.Id = varId;
			
				item.EstimateID = varEstimateID;
			
				item.ItemType = varItemType;
			
				item.Quantity = varQuantity;
			
				item.Style = varStyle;
			
				item.DisplayText = varDisplayText;
			
				item.Size = varSize;
			
				item.Entry = varEntry;
			
				item.Type = varType;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemTypeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn QuantityColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn StyleColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DisplayTextColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SizeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn EntryColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn TypeColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string EstimateID = @"EstimateID";
			 public static string ItemType = @"ItemType";
			 public static string Quantity = @"Quantity";
			 public static string Style = @"Style";
			 public static string DisplayText = @"DisplayText";
			 public static string Size = @"Size";
			 public static string Entry = @"Entry";
			 public static string Type = @"Type";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
