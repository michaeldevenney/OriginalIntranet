using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL{
    /// <summary>
    /// Strongly-typed collection for the Testing class.
    /// </summary>
    [Serializable]
    public partial class TestingCollection : ReadOnlyList<Testing, TestingCollection>
    {        
        public TestingCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the _TESTING view.
    /// </summary>
    [Serializable]
    public partial class Testing : ReadOnlyRecord<Testing>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("_TESTING", TableType.View, DataService.GetInstance("Internal"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarDisplayText = new TableSchema.TableColumn(schema);
                colvarDisplayText.ColumnName = "DisplayText";
                colvarDisplayText.DataType = DbType.AnsiString;
                colvarDisplayText.MaxLength = 203;
                colvarDisplayText.AutoIncrement = false;
                colvarDisplayText.IsNullable = false;
                colvarDisplayText.IsPrimaryKey = false;
                colvarDisplayText.IsForeignKey = false;
                colvarDisplayText.IsReadOnly = false;
                
                schema.Columns.Add(colvarDisplayText);
                
                TableSchema.TableColumn colvarAction = new TableSchema.TableColumn(schema);
                colvarAction.ColumnName = "Action";
                colvarAction.DataType = DbType.AnsiString;
                colvarAction.MaxLength = 50;
                colvarAction.AutoIncrement = false;
                colvarAction.IsNullable = true;
                colvarAction.IsPrimaryKey = false;
                colvarAction.IsForeignKey = false;
                colvarAction.IsReadOnly = false;
                
                schema.Columns.Add(colvarAction);
                
                TableSchema.TableColumn colvarDateTimeStamp = new TableSchema.TableColumn(schema);
                colvarDateTimeStamp.ColumnName = "DateTimeStamp";
                colvarDateTimeStamp.DataType = DbType.DateTime;
                colvarDateTimeStamp.MaxLength = 0;
                colvarDateTimeStamp.AutoIncrement = false;
                colvarDateTimeStamp.IsNullable = true;
                colvarDateTimeStamp.IsPrimaryKey = false;
                colvarDateTimeStamp.IsForeignKey = false;
                colvarDateTimeStamp.IsReadOnly = false;
                
                schema.Columns.Add(colvarDateTimeStamp);
                
                TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
                colvarComments.ColumnName = "Comments";
                colvarComments.DataType = DbType.AnsiString;
                colvarComments.MaxLength = -1;
                colvarComments.AutoIncrement = false;
                colvarComments.IsNullable = true;
                colvarComments.IsPrimaryKey = false;
                colvarComments.IsForeignKey = false;
                colvarComments.IsReadOnly = false;
                
                schema.Columns.Add(colvarComments);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Internal"].AddSchema("_TESTING",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public Testing()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public Testing(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public Testing(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public Testing(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("DisplayText")]
        [Bindable(true)]
        public string DisplayText 
	    {
		    get
		    {
			    return GetColumnValue<string>("DisplayText");
		    }
            set 
		    {
			    SetColumnValue("DisplayText", value);
            }
        }
	      
        [XmlAttribute("Action")]
        [Bindable(true)]
        public string Action 
	    {
		    get
		    {
			    return GetColumnValue<string>("Action");
		    }
            set 
		    {
			    SetColumnValue("Action", value);
            }
        }
	      
        [XmlAttribute("DateTimeStamp")]
        [Bindable(true)]
        public DateTime? DateTimeStamp 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("DateTimeStamp");
		    }
            set 
		    {
			    SetColumnValue("DateTimeStamp", value);
            }
        }
	      
        [XmlAttribute("Comments")]
        [Bindable(true)]
        public string Comments 
	    {
		    get
		    {
			    return GetColumnValue<string>("Comments");
		    }
            set 
		    {
			    SetColumnValue("Comments", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string DisplayText = @"DisplayText";
            
            public static string Action = @"Action";
            
            public static string DateTimeStamp = @"DateTimeStamp";
            
            public static string Comments = @"Comments";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
