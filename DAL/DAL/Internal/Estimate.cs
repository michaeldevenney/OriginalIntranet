using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the Estimate class.
	/// </summary>
    [Serializable]
	public partial class EstimateCollection : ActiveList<Estimate, EstimateCollection>
	{	   
		public EstimateCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>EstimateCollection</returns>
		public EstimateCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Estimate o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Estimates table.
	/// </summary>
	[Serializable]
	public partial class Estimate : ActiveRecord<Estimate>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Estimate()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Estimate(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Estimate(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Estimate(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Estimates", TableType.Table, DataService.GetInstance("Internal"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarPriority = new TableSchema.TableColumn(schema);
				colvarPriority.ColumnName = "Priority";
				colvarPriority.DataType = DbType.Int32;
				colvarPriority.MaxLength = 0;
				colvarPriority.AutoIncrement = false;
				colvarPriority.IsNullable = true;
				colvarPriority.IsPrimaryKey = false;
				colvarPriority.IsForeignKey = false;
				colvarPriority.IsReadOnly = false;
				colvarPriority.DefaultSetting = @"";
				colvarPriority.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriority);
				
				TableSchema.TableColumn colvarJobName = new TableSchema.TableColumn(schema);
				colvarJobName.ColumnName = "JobName";
				colvarJobName.DataType = DbType.Int32;
				colvarJobName.MaxLength = 0;
				colvarJobName.AutoIncrement = false;
				colvarJobName.IsNullable = false;
				colvarJobName.IsPrimaryKey = false;
				colvarJobName.IsForeignKey = false;
				colvarJobName.IsReadOnly = false;
				colvarJobName.DefaultSetting = @"";
				colvarJobName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobName);
				
				TableSchema.TableColumn colvarEstimateNumber = new TableSchema.TableColumn(schema);
				colvarEstimateNumber.ColumnName = "EstimateNumber";
				colvarEstimateNumber.DataType = DbType.AnsiString;
				colvarEstimateNumber.MaxLength = 50;
				colvarEstimateNumber.AutoIncrement = false;
				colvarEstimateNumber.IsNullable = true;
				colvarEstimateNumber.IsPrimaryKey = false;
				colvarEstimateNumber.IsForeignKey = false;
				colvarEstimateNumber.IsReadOnly = false;
				colvarEstimateNumber.DefaultSetting = @"";
				colvarEstimateNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateNumber);
				
				TableSchema.TableColumn colvarReadyForEstimating = new TableSchema.TableColumn(schema);
				colvarReadyForEstimating.ColumnName = "ReadyForEstimating";
				colvarReadyForEstimating.DataType = DbType.Boolean;
				colvarReadyForEstimating.MaxLength = 0;
				colvarReadyForEstimating.AutoIncrement = false;
				colvarReadyForEstimating.IsNullable = false;
				colvarReadyForEstimating.IsPrimaryKey = false;
				colvarReadyForEstimating.IsForeignKey = false;
				colvarReadyForEstimating.IsReadOnly = false;
				
						colvarReadyForEstimating.DefaultSetting = @"((0))";
				colvarReadyForEstimating.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReadyForEstimating);
				
				TableSchema.TableColumn colvarEstimateDate = new TableSchema.TableColumn(schema);
				colvarEstimateDate.ColumnName = "EstimateDate";
				colvarEstimateDate.DataType = DbType.DateTime;
				colvarEstimateDate.MaxLength = 0;
				colvarEstimateDate.AutoIncrement = false;
				colvarEstimateDate.IsNullable = true;
				colvarEstimateDate.IsPrimaryKey = false;
				colvarEstimateDate.IsForeignKey = false;
				colvarEstimateDate.IsReadOnly = false;
				colvarEstimateDate.DefaultSetting = @"";
				colvarEstimateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateDate);
				
				TableSchema.TableColumn colvarContact = new TableSchema.TableColumn(schema);
				colvarContact.ColumnName = "Contact";
				colvarContact.DataType = DbType.AnsiString;
				colvarContact.MaxLength = 255;
				colvarContact.AutoIncrement = false;
				colvarContact.IsNullable = true;
				colvarContact.IsPrimaryKey = false;
				colvarContact.IsForeignKey = false;
				colvarContact.IsReadOnly = false;
				colvarContact.DefaultSetting = @"";
				colvarContact.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContact);
				
				TableSchema.TableColumn colvarContactEmail = new TableSchema.TableColumn(schema);
				colvarContactEmail.ColumnName = "ContactEmail";
				colvarContactEmail.DataType = DbType.AnsiString;
				colvarContactEmail.MaxLength = 50;
				colvarContactEmail.AutoIncrement = false;
				colvarContactEmail.IsNullable = true;
				colvarContactEmail.IsPrimaryKey = false;
				colvarContactEmail.IsForeignKey = false;
				colvarContactEmail.IsReadOnly = false;
				colvarContactEmail.DefaultSetting = @"";
				colvarContactEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactEmail);
				
				TableSchema.TableColumn colvarReceived = new TableSchema.TableColumn(schema);
				colvarReceived.ColumnName = "Received";
				colvarReceived.DataType = DbType.DateTime;
				colvarReceived.MaxLength = 0;
				colvarReceived.AutoIncrement = false;
				colvarReceived.IsNullable = true;
				colvarReceived.IsPrimaryKey = false;
				colvarReceived.IsForeignKey = false;
				colvarReceived.IsReadOnly = false;
				colvarReceived.DefaultSetting = @"";
				colvarReceived.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceived);
				
				TableSchema.TableColumn colvarBidDueDate = new TableSchema.TableColumn(schema);
				colvarBidDueDate.ColumnName = "BidDueDate";
				colvarBidDueDate.DataType = DbType.DateTime;
				colvarBidDueDate.MaxLength = 0;
				colvarBidDueDate.AutoIncrement = false;
				colvarBidDueDate.IsNullable = true;
				colvarBidDueDate.IsPrimaryKey = false;
				colvarBidDueDate.IsForeignKey = false;
				colvarBidDueDate.IsReadOnly = false;
				colvarBidDueDate.DefaultSetting = @"";
				colvarBidDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBidDueDate);
				
				TableSchema.TableColumn colvarEstimator = new TableSchema.TableColumn(schema);
				colvarEstimator.ColumnName = "Estimator";
				colvarEstimator.DataType = DbType.Int32;
				colvarEstimator.MaxLength = 0;
				colvarEstimator.AutoIncrement = false;
				colvarEstimator.IsNullable = true;
				colvarEstimator.IsPrimaryKey = false;
				colvarEstimator.IsForeignKey = false;
				colvarEstimator.IsReadOnly = false;
				colvarEstimator.DefaultSetting = @"";
				colvarEstimator.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimator);
				
				TableSchema.TableColumn colvarEstimatesDirectory = new TableSchema.TableColumn(schema);
				colvarEstimatesDirectory.ColumnName = "EstimatesDirectory";
				colvarEstimatesDirectory.DataType = DbType.AnsiString;
				colvarEstimatesDirectory.MaxLength = 500;
				colvarEstimatesDirectory.AutoIncrement = false;
				colvarEstimatesDirectory.IsNullable = true;
				colvarEstimatesDirectory.IsPrimaryKey = false;
				colvarEstimatesDirectory.IsForeignKey = false;
				colvarEstimatesDirectory.IsReadOnly = false;
				colvarEstimatesDirectory.DefaultSetting = @"";
				colvarEstimatesDirectory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimatesDirectory);
				
				TableSchema.TableColumn colvarProspectDirectory = new TableSchema.TableColumn(schema);
				colvarProspectDirectory.ColumnName = "ProspectDirectory";
				colvarProspectDirectory.DataType = DbType.AnsiString;
				colvarProspectDirectory.MaxLength = 500;
				colvarProspectDirectory.AutoIncrement = false;
				colvarProspectDirectory.IsNullable = true;
				colvarProspectDirectory.IsPrimaryKey = false;
				colvarProspectDirectory.IsForeignKey = false;
				colvarProspectDirectory.IsReadOnly = false;
				colvarProspectDirectory.DefaultSetting = @"";
				colvarProspectDirectory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProspectDirectory);
				
				TableSchema.TableColumn colvarResponseRequestedBy = new TableSchema.TableColumn(schema);
				colvarResponseRequestedBy.ColumnName = "ResponseRequestedBy";
				colvarResponseRequestedBy.DataType = DbType.DateTime;
				colvarResponseRequestedBy.MaxLength = 0;
				colvarResponseRequestedBy.AutoIncrement = false;
				colvarResponseRequestedBy.IsNullable = true;
				colvarResponseRequestedBy.IsPrimaryKey = false;
				colvarResponseRequestedBy.IsForeignKey = false;
				colvarResponseRequestedBy.IsReadOnly = false;
				colvarResponseRequestedBy.DefaultSetting = @"";
				colvarResponseRequestedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResponseRequestedBy);
				
				TableSchema.TableColumn colvarEstimateSent = new TableSchema.TableColumn(schema);
				colvarEstimateSent.ColumnName = "EstimateSent";
				colvarEstimateSent.DataType = DbType.Boolean;
				colvarEstimateSent.MaxLength = 0;
				colvarEstimateSent.AutoIncrement = false;
				colvarEstimateSent.IsNullable = false;
				colvarEstimateSent.IsPrimaryKey = false;
				colvarEstimateSent.IsForeignKey = false;
				colvarEstimateSent.IsReadOnly = false;
				
						colvarEstimateSent.DefaultSetting = @"((0))";
				colvarEstimateSent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateSent);
				
				TableSchema.TableColumn colvarEstimateSentDate = new TableSchema.TableColumn(schema);
				colvarEstimateSentDate.ColumnName = "EstimateSentDate";
				colvarEstimateSentDate.DataType = DbType.DateTime;
				colvarEstimateSentDate.MaxLength = 0;
				colvarEstimateSentDate.AutoIncrement = false;
				colvarEstimateSentDate.IsNullable = true;
				colvarEstimateSentDate.IsPrimaryKey = false;
				colvarEstimateSentDate.IsForeignKey = false;
				colvarEstimateSentDate.IsReadOnly = false;
				colvarEstimateSentDate.DefaultSetting = @"";
				colvarEstimateSentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateSentDate);
				
				TableSchema.TableColumn colvarEstimateTotal = new TableSchema.TableColumn(schema);
				colvarEstimateTotal.ColumnName = "EstimateTotal";
				colvarEstimateTotal.DataType = DbType.Currency;
				colvarEstimateTotal.MaxLength = 0;
				colvarEstimateTotal.AutoIncrement = false;
				colvarEstimateTotal.IsNullable = true;
				colvarEstimateTotal.IsPrimaryKey = false;
				colvarEstimateTotal.IsForeignKey = false;
				colvarEstimateTotal.IsReadOnly = false;
				
						colvarEstimateTotal.DefaultSetting = @"((0))";
				colvarEstimateTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateTotal);
				
				TableSchema.TableColumn colvarDoorsTotal = new TableSchema.TableColumn(schema);
				colvarDoorsTotal.ColumnName = "DoorsTotal";
				colvarDoorsTotal.DataType = DbType.Currency;
				colvarDoorsTotal.MaxLength = 0;
				colvarDoorsTotal.AutoIncrement = false;
				colvarDoorsTotal.IsNullable = true;
				colvarDoorsTotal.IsPrimaryKey = false;
				colvarDoorsTotal.IsForeignKey = false;
				colvarDoorsTotal.IsReadOnly = false;
				
						colvarDoorsTotal.DefaultSetting = @"((0))";
				colvarDoorsTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDoorsTotal);
				
				TableSchema.TableColumn colvarInteriorsTotal = new TableSchema.TableColumn(schema);
				colvarInteriorsTotal.ColumnName = "InteriorsTotal";
				colvarInteriorsTotal.DataType = DbType.Currency;
				colvarInteriorsTotal.MaxLength = 0;
				colvarInteriorsTotal.AutoIncrement = false;
				colvarInteriorsTotal.IsNullable = true;
				colvarInteriorsTotal.IsPrimaryKey = false;
				colvarInteriorsTotal.IsForeignKey = false;
				colvarInteriorsTotal.IsReadOnly = false;
				
						colvarInteriorsTotal.DefaultSetting = @"((0))";
				colvarInteriorsTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInteriorsTotal);
				
				TableSchema.TableColumn colvarBunkerTotal = new TableSchema.TableColumn(schema);
				colvarBunkerTotal.ColumnName = "BunkerTotal";
				colvarBunkerTotal.DataType = DbType.Currency;
				colvarBunkerTotal.MaxLength = 0;
				colvarBunkerTotal.AutoIncrement = false;
				colvarBunkerTotal.IsNullable = true;
				colvarBunkerTotal.IsPrimaryKey = false;
				colvarBunkerTotal.IsForeignKey = false;
				colvarBunkerTotal.IsReadOnly = false;
				
						colvarBunkerTotal.DefaultSetting = @"((0))";
				colvarBunkerTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBunkerTotal);
				
				TableSchema.TableColumn colvarStatusID = new TableSchema.TableColumn(schema);
				colvarStatusID.ColumnName = "StatusID";
				colvarStatusID.DataType = DbType.Int32;
				colvarStatusID.MaxLength = 0;
				colvarStatusID.AutoIncrement = false;
				colvarStatusID.IsNullable = false;
				colvarStatusID.IsPrimaryKey = false;
				colvarStatusID.IsForeignKey = false;
				colvarStatusID.IsReadOnly = false;
				
						colvarStatusID.DefaultSetting = @"((0))";
				colvarStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusID);
				
				TableSchema.TableColumn colvarStepID = new TableSchema.TableColumn(schema);
				colvarStepID.ColumnName = "StepID";
				colvarStepID.DataType = DbType.Int32;
				colvarStepID.MaxLength = 0;
				colvarStepID.AutoIncrement = false;
				colvarStepID.IsNullable = false;
				colvarStepID.IsPrimaryKey = false;
				colvarStepID.IsForeignKey = false;
				colvarStepID.IsReadOnly = false;
				
						colvarStepID.DefaultSetting = @"((0))";
				colvarStepID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStepID);
				
				TableSchema.TableColumn colvarCurrentStatus = new TableSchema.TableColumn(schema);
				colvarCurrentStatus.ColumnName = "CurrentStatus";
				colvarCurrentStatus.DataType = DbType.AnsiString;
				colvarCurrentStatus.MaxLength = -1;
				colvarCurrentStatus.AutoIncrement = false;
				colvarCurrentStatus.IsNullable = true;
				colvarCurrentStatus.IsPrimaryKey = false;
				colvarCurrentStatus.IsForeignKey = false;
				colvarCurrentStatus.IsReadOnly = false;
				colvarCurrentStatus.DefaultSetting = @"";
				colvarCurrentStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentStatus);
				
				TableSchema.TableColumn colvarDoorScope = new TableSchema.TableColumn(schema);
				colvarDoorScope.ColumnName = "DoorScope";
				colvarDoorScope.DataType = DbType.AnsiString;
				colvarDoorScope.MaxLength = 1000;
				colvarDoorScope.AutoIncrement = false;
				colvarDoorScope.IsNullable = true;
				colvarDoorScope.IsPrimaryKey = false;
				colvarDoorScope.IsForeignKey = false;
				colvarDoorScope.IsReadOnly = false;
				colvarDoorScope.DefaultSetting = @"";
				colvarDoorScope.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDoorScope);
				
				TableSchema.TableColumn colvarInteriorScope = new TableSchema.TableColumn(schema);
				colvarInteriorScope.ColumnName = "InteriorScope";
				colvarInteriorScope.DataType = DbType.AnsiString;
				colvarInteriorScope.MaxLength = 1000;
				colvarInteriorScope.AutoIncrement = false;
				colvarInteriorScope.IsNullable = true;
				colvarInteriorScope.IsPrimaryKey = false;
				colvarInteriorScope.IsForeignKey = false;
				colvarInteriorScope.IsReadOnly = false;
				colvarInteriorScope.DefaultSetting = @"";
				colvarInteriorScope.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInteriorScope);
				
				TableSchema.TableColumn colvarBunkerScope = new TableSchema.TableColumn(schema);
				colvarBunkerScope.ColumnName = "BunkerScope";
				colvarBunkerScope.DataType = DbType.AnsiString;
				colvarBunkerScope.MaxLength = 1000;
				colvarBunkerScope.AutoIncrement = false;
				colvarBunkerScope.IsNullable = true;
				colvarBunkerScope.IsPrimaryKey = false;
				colvarBunkerScope.IsForeignKey = false;
				colvarBunkerScope.IsReadOnly = false;
				colvarBunkerScope.DefaultSetting = @"";
				colvarBunkerScope.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBunkerScope);
				
				TableSchema.TableColumn colvarBunkerTitle = new TableSchema.TableColumn(schema);
				colvarBunkerTitle.ColumnName = "BunkerTitle";
				colvarBunkerTitle.DataType = DbType.AnsiString;
				colvarBunkerTitle.MaxLength = 100;
				colvarBunkerTitle.AutoIncrement = false;
				colvarBunkerTitle.IsNullable = true;
				colvarBunkerTitle.IsPrimaryKey = false;
				colvarBunkerTitle.IsForeignKey = false;
				colvarBunkerTitle.IsReadOnly = false;
				colvarBunkerTitle.DefaultSetting = @"";
				colvarBunkerTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBunkerTitle);
				
				TableSchema.TableColumn colvarDesignBasis = new TableSchema.TableColumn(schema);
				colvarDesignBasis.ColumnName = "DesignBasis";
				colvarDesignBasis.DataType = DbType.AnsiString;
				colvarDesignBasis.MaxLength = -1;
				colvarDesignBasis.AutoIncrement = false;
				colvarDesignBasis.IsNullable = true;
				colvarDesignBasis.IsPrimaryKey = false;
				colvarDesignBasis.IsForeignKey = false;
				colvarDesignBasis.IsReadOnly = false;
				colvarDesignBasis.DefaultSetting = @"";
				colvarDesignBasis.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesignBasis);
				
				TableSchema.TableColumn colvarLaborType = new TableSchema.TableColumn(schema);
				colvarLaborType.ColumnName = "LaborType";
				colvarLaborType.DataType = DbType.AnsiString;
				colvarLaborType.MaxLength = 15;
				colvarLaborType.AutoIncrement = false;
				colvarLaborType.IsNullable = true;
				colvarLaborType.IsPrimaryKey = false;
				colvarLaborType.IsForeignKey = false;
				colvarLaborType.IsReadOnly = false;
				colvarLaborType.DefaultSetting = @"";
				colvarLaborType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLaborType);
				
				TableSchema.TableColumn colvarPhysicsBasis = new TableSchema.TableColumn(schema);
				colvarPhysicsBasis.ColumnName = "PhysicsBasis";
				colvarPhysicsBasis.DataType = DbType.AnsiString;
				colvarPhysicsBasis.MaxLength = -1;
				colvarPhysicsBasis.AutoIncrement = false;
				colvarPhysicsBasis.IsNullable = true;
				colvarPhysicsBasis.IsPrimaryKey = false;
				colvarPhysicsBasis.IsForeignKey = false;
				colvarPhysicsBasis.IsReadOnly = false;
				colvarPhysicsBasis.DefaultSetting = @"";
				colvarPhysicsBasis.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhysicsBasis);
				
				TableSchema.TableColumn colvarBunkerClarifications = new TableSchema.TableColumn(schema);
				colvarBunkerClarifications.ColumnName = "BunkerClarifications";
				colvarBunkerClarifications.DataType = DbType.AnsiString;
				colvarBunkerClarifications.MaxLength = -1;
				colvarBunkerClarifications.AutoIncrement = false;
				colvarBunkerClarifications.IsNullable = true;
				colvarBunkerClarifications.IsPrimaryKey = false;
				colvarBunkerClarifications.IsForeignKey = false;
				colvarBunkerClarifications.IsReadOnly = false;
				colvarBunkerClarifications.DefaultSetting = @"";
				colvarBunkerClarifications.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBunkerClarifications);
				
				TableSchema.TableColumn colvarDrawings = new TableSchema.TableColumn(schema);
				colvarDrawings.ColumnName = "Drawings";
				colvarDrawings.DataType = DbType.Boolean;
				colvarDrawings.MaxLength = 0;
				colvarDrawings.AutoIncrement = false;
				colvarDrawings.IsNullable = true;
				colvarDrawings.IsPrimaryKey = false;
				colvarDrawings.IsForeignKey = false;
				colvarDrawings.IsReadOnly = false;
				colvarDrawings.DefaultSetting = @"";
				colvarDrawings.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrawings);
				
				TableSchema.TableColumn colvarProspectus = new TableSchema.TableColumn(schema);
				colvarProspectus.ColumnName = "Prospectus";
				colvarProspectus.DataType = DbType.Boolean;
				colvarProspectus.MaxLength = 0;
				colvarProspectus.AutoIncrement = false;
				colvarProspectus.IsNullable = true;
				colvarProspectus.IsPrimaryKey = false;
				colvarProspectus.IsForeignKey = false;
				colvarProspectus.IsReadOnly = false;
				colvarProspectus.DefaultSetting = @"";
				colvarProspectus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProspectus);
				
				TableSchema.TableColumn colvarTxParameters = new TableSchema.TableColumn(schema);
				colvarTxParameters.ColumnName = "TxParameters";
				colvarTxParameters.DataType = DbType.Boolean;
				colvarTxParameters.MaxLength = 0;
				colvarTxParameters.AutoIncrement = false;
				colvarTxParameters.IsNullable = true;
				colvarTxParameters.IsPrimaryKey = false;
				colvarTxParameters.IsForeignKey = false;
				colvarTxParameters.IsReadOnly = false;
				colvarTxParameters.DefaultSetting = @"";
				colvarTxParameters.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxParameters);
				
				TableSchema.TableColumn colvarEstimateDescription = new TableSchema.TableColumn(schema);
				colvarEstimateDescription.ColumnName = "EstimateDescription";
				colvarEstimateDescription.DataType = DbType.AnsiString;
				colvarEstimateDescription.MaxLength = -1;
				colvarEstimateDescription.AutoIncrement = false;
				colvarEstimateDescription.IsNullable = true;
				colvarEstimateDescription.IsPrimaryKey = false;
				colvarEstimateDescription.IsForeignKey = false;
				colvarEstimateDescription.IsReadOnly = false;
				colvarEstimateDescription.DefaultSetting = @"";
				colvarEstimateDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateDescription);
				
				TableSchema.TableColumn colvarSupplementalBlockCount = new TableSchema.TableColumn(schema);
				colvarSupplementalBlockCount.ColumnName = "SupplementalBlockCount";
				colvarSupplementalBlockCount.DataType = DbType.Int32;
				colvarSupplementalBlockCount.MaxLength = 0;
				colvarSupplementalBlockCount.AutoIncrement = false;
				colvarSupplementalBlockCount.IsNullable = true;
				colvarSupplementalBlockCount.IsPrimaryKey = false;
				colvarSupplementalBlockCount.IsForeignKey = false;
				colvarSupplementalBlockCount.IsReadOnly = false;
				colvarSupplementalBlockCount.DefaultSetting = @"";
				colvarSupplementalBlockCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSupplementalBlockCount);
				
				TableSchema.TableColumn colvarInteriorsQty = new TableSchema.TableColumn(schema);
				colvarInteriorsQty.ColumnName = "InteriorsQty";
				colvarInteriorsQty.DataType = DbType.Int32;
				colvarInteriorsQty.MaxLength = 0;
				colvarInteriorsQty.AutoIncrement = false;
				colvarInteriorsQty.IsNullable = true;
				colvarInteriorsQty.IsPrimaryKey = false;
				colvarInteriorsQty.IsForeignKey = false;
				colvarInteriorsQty.IsReadOnly = false;
				colvarInteriorsQty.DefaultSetting = @"";
				colvarInteriorsQty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInteriorsQty);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Internal"].AddSchema("Estimates",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Priority")]
		[Bindable(true)]
		public int? Priority 
		{
			get { return GetColumnValue<int?>(Columns.Priority); }
			set { SetColumnValue(Columns.Priority, value); }
		}
		  
		[XmlAttribute("JobName")]
		[Bindable(true)]
		public int JobName 
		{
			get { return GetColumnValue<int>(Columns.JobName); }
			set { SetColumnValue(Columns.JobName, value); }
		}
		  
		[XmlAttribute("EstimateNumber")]
		[Bindable(true)]
		public string EstimateNumber 
		{
			get { return GetColumnValue<string>(Columns.EstimateNumber); }
			set { SetColumnValue(Columns.EstimateNumber, value); }
		}
		  
		[XmlAttribute("ReadyForEstimating")]
		[Bindable(true)]
		public bool ReadyForEstimating 
		{
			get { return GetColumnValue<bool>(Columns.ReadyForEstimating); }
			set { SetColumnValue(Columns.ReadyForEstimating, value); }
		}
		  
		[XmlAttribute("EstimateDate")]
		[Bindable(true)]
		public DateTime? EstimateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.EstimateDate); }
			set { SetColumnValue(Columns.EstimateDate, value); }
		}
		  
		[XmlAttribute("Contact")]
		[Bindable(true)]
		public string Contact 
		{
			get { return GetColumnValue<string>(Columns.Contact); }
			set { SetColumnValue(Columns.Contact, value); }
		}
		  
		[XmlAttribute("ContactEmail")]
		[Bindable(true)]
		public string ContactEmail 
		{
			get { return GetColumnValue<string>(Columns.ContactEmail); }
			set { SetColumnValue(Columns.ContactEmail, value); }
		}
		  
		[XmlAttribute("Received")]
		[Bindable(true)]
		public DateTime? Received 
		{
			get { return GetColumnValue<DateTime?>(Columns.Received); }
			set { SetColumnValue(Columns.Received, value); }
		}
		  
		[XmlAttribute("BidDueDate")]
		[Bindable(true)]
		public DateTime? BidDueDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.BidDueDate); }
			set { SetColumnValue(Columns.BidDueDate, value); }
		}
		  
		[XmlAttribute("Estimator")]
		[Bindable(true)]
		public int? Estimator 
		{
			get { return GetColumnValue<int?>(Columns.Estimator); }
			set { SetColumnValue(Columns.Estimator, value); }
		}
		  
		[XmlAttribute("EstimatesDirectory")]
		[Bindable(true)]
		public string EstimatesDirectory 
		{
			get { return GetColumnValue<string>(Columns.EstimatesDirectory); }
			set { SetColumnValue(Columns.EstimatesDirectory, value); }
		}
		  
		[XmlAttribute("ProspectDirectory")]
		[Bindable(true)]
		public string ProspectDirectory 
		{
			get { return GetColumnValue<string>(Columns.ProspectDirectory); }
			set { SetColumnValue(Columns.ProspectDirectory, value); }
		}
		  
		[XmlAttribute("ResponseRequestedBy")]
		[Bindable(true)]
		public DateTime? ResponseRequestedBy 
		{
			get { return GetColumnValue<DateTime?>(Columns.ResponseRequestedBy); }
			set { SetColumnValue(Columns.ResponseRequestedBy, value); }
		}
		  
		[XmlAttribute("EstimateSent")]
		[Bindable(true)]
		public bool EstimateSent 
		{
			get { return GetColumnValue<bool>(Columns.EstimateSent); }
			set { SetColumnValue(Columns.EstimateSent, value); }
		}
		  
		[XmlAttribute("EstimateSentDate")]
		[Bindable(true)]
		public DateTime? EstimateSentDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.EstimateSentDate); }
			set { SetColumnValue(Columns.EstimateSentDate, value); }
		}
		  
		[XmlAttribute("EstimateTotal")]
		[Bindable(true)]
		public decimal? EstimateTotal 
		{
			get { return GetColumnValue<decimal?>(Columns.EstimateTotal); }
			set { SetColumnValue(Columns.EstimateTotal, value); }
		}
		  
		[XmlAttribute("DoorsTotal")]
		[Bindable(true)]
		public decimal? DoorsTotal 
		{
			get { return GetColumnValue<decimal?>(Columns.DoorsTotal); }
			set { SetColumnValue(Columns.DoorsTotal, value); }
		}
		  
		[XmlAttribute("InteriorsTotal")]
		[Bindable(true)]
		public decimal? InteriorsTotal 
		{
			get { return GetColumnValue<decimal?>(Columns.InteriorsTotal); }
			set { SetColumnValue(Columns.InteriorsTotal, value); }
		}
		  
		[XmlAttribute("BunkerTotal")]
		[Bindable(true)]
		public decimal? BunkerTotal 
		{
			get { return GetColumnValue<decimal?>(Columns.BunkerTotal); }
			set { SetColumnValue(Columns.BunkerTotal, value); }
		}
		  
		[XmlAttribute("StatusID")]
		[Bindable(true)]
		public int StatusID 
		{
			get { return GetColumnValue<int>(Columns.StatusID); }
			set { SetColumnValue(Columns.StatusID, value); }
		}
		  
		[XmlAttribute("StepID")]
		[Bindable(true)]
		public int StepID 
		{
			get { return GetColumnValue<int>(Columns.StepID); }
			set { SetColumnValue(Columns.StepID, value); }
		}
		  
		[XmlAttribute("CurrentStatus")]
		[Bindable(true)]
		public string CurrentStatus 
		{
			get { return GetColumnValue<string>(Columns.CurrentStatus); }
			set { SetColumnValue(Columns.CurrentStatus, value); }
		}
		  
		[XmlAttribute("DoorScope")]
		[Bindable(true)]
		public string DoorScope 
		{
			get { return GetColumnValue<string>(Columns.DoorScope); }
			set { SetColumnValue(Columns.DoorScope, value); }
		}
		  
		[XmlAttribute("InteriorScope")]
		[Bindable(true)]
		public string InteriorScope 
		{
			get { return GetColumnValue<string>(Columns.InteriorScope); }
			set { SetColumnValue(Columns.InteriorScope, value); }
		}
		  
		[XmlAttribute("BunkerScope")]
		[Bindable(true)]
		public string BunkerScope 
		{
			get { return GetColumnValue<string>(Columns.BunkerScope); }
			set { SetColumnValue(Columns.BunkerScope, value); }
		}
		  
		[XmlAttribute("BunkerTitle")]
		[Bindable(true)]
		public string BunkerTitle 
		{
			get { return GetColumnValue<string>(Columns.BunkerTitle); }
			set { SetColumnValue(Columns.BunkerTitle, value); }
		}
		  
		[XmlAttribute("DesignBasis")]
		[Bindable(true)]
		public string DesignBasis 
		{
			get { return GetColumnValue<string>(Columns.DesignBasis); }
			set { SetColumnValue(Columns.DesignBasis, value); }
		}
		  
		[XmlAttribute("LaborType")]
		[Bindable(true)]
		public string LaborType 
		{
			get { return GetColumnValue<string>(Columns.LaborType); }
			set { SetColumnValue(Columns.LaborType, value); }
		}
		  
		[XmlAttribute("PhysicsBasis")]
		[Bindable(true)]
		public string PhysicsBasis 
		{
			get { return GetColumnValue<string>(Columns.PhysicsBasis); }
			set { SetColumnValue(Columns.PhysicsBasis, value); }
		}
		  
		[XmlAttribute("BunkerClarifications")]
		[Bindable(true)]
		public string BunkerClarifications 
		{
			get { return GetColumnValue<string>(Columns.BunkerClarifications); }
			set { SetColumnValue(Columns.BunkerClarifications, value); }
		}
		  
		[XmlAttribute("Drawings")]
		[Bindable(true)]
		public bool? Drawings 
		{
			get { return GetColumnValue<bool?>(Columns.Drawings); }
			set { SetColumnValue(Columns.Drawings, value); }
		}
		  
		[XmlAttribute("Prospectus")]
		[Bindable(true)]
		public bool? Prospectus 
		{
			get { return GetColumnValue<bool?>(Columns.Prospectus); }
			set { SetColumnValue(Columns.Prospectus, value); }
		}
		  
		[XmlAttribute("TxParameters")]
		[Bindable(true)]
		public bool? TxParameters 
		{
			get { return GetColumnValue<bool?>(Columns.TxParameters); }
			set { SetColumnValue(Columns.TxParameters, value); }
		}
		  
		[XmlAttribute("EstimateDescription")]
		[Bindable(true)]
		public string EstimateDescription 
		{
			get { return GetColumnValue<string>(Columns.EstimateDescription); }
			set { SetColumnValue(Columns.EstimateDescription, value); }
		}
		  
		[XmlAttribute("SupplementalBlockCount")]
		[Bindable(true)]
		public int? SupplementalBlockCount 
		{
			get { return GetColumnValue<int?>(Columns.SupplementalBlockCount); }
			set { SetColumnValue(Columns.SupplementalBlockCount, value); }
		}
		  
		[XmlAttribute("InteriorsQty")]
		[Bindable(true)]
		public int? InteriorsQty 
		{
			get { return GetColumnValue<int?>(Columns.InteriorsQty); }
			set { SetColumnValue(Columns.InteriorsQty, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varPriority,int varJobName,string varEstimateNumber,bool varReadyForEstimating,DateTime? varEstimateDate,string varContact,string varContactEmail,DateTime? varReceived,DateTime? varBidDueDate,int? varEstimator,string varEstimatesDirectory,string varProspectDirectory,DateTime? varResponseRequestedBy,bool varEstimateSent,DateTime? varEstimateSentDate,decimal? varEstimateTotal,decimal? varDoorsTotal,decimal? varInteriorsTotal,decimal? varBunkerTotal,int varStatusID,int varStepID,string varCurrentStatus,string varDoorScope,string varInteriorScope,string varBunkerScope,string varBunkerTitle,string varDesignBasis,string varLaborType,string varPhysicsBasis,string varBunkerClarifications,bool? varDrawings,bool? varProspectus,bool? varTxParameters,string varEstimateDescription,int? varSupplementalBlockCount,int? varInteriorsQty)
		{
			Estimate item = new Estimate();
			
			item.Priority = varPriority;
			
			item.JobName = varJobName;
			
			item.EstimateNumber = varEstimateNumber;
			
			item.ReadyForEstimating = varReadyForEstimating;
			
			item.EstimateDate = varEstimateDate;
			
			item.Contact = varContact;
			
			item.ContactEmail = varContactEmail;
			
			item.Received = varReceived;
			
			item.BidDueDate = varBidDueDate;
			
			item.Estimator = varEstimator;
			
			item.EstimatesDirectory = varEstimatesDirectory;
			
			item.ProspectDirectory = varProspectDirectory;
			
			item.ResponseRequestedBy = varResponseRequestedBy;
			
			item.EstimateSent = varEstimateSent;
			
			item.EstimateSentDate = varEstimateSentDate;
			
			item.EstimateTotal = varEstimateTotal;
			
			item.DoorsTotal = varDoorsTotal;
			
			item.InteriorsTotal = varInteriorsTotal;
			
			item.BunkerTotal = varBunkerTotal;
			
			item.StatusID = varStatusID;
			
			item.StepID = varStepID;
			
			item.CurrentStatus = varCurrentStatus;
			
			item.DoorScope = varDoorScope;
			
			item.InteriorScope = varInteriorScope;
			
			item.BunkerScope = varBunkerScope;
			
			item.BunkerTitle = varBunkerTitle;
			
			item.DesignBasis = varDesignBasis;
			
			item.LaborType = varLaborType;
			
			item.PhysicsBasis = varPhysicsBasis;
			
			item.BunkerClarifications = varBunkerClarifications;
			
			item.Drawings = varDrawings;
			
			item.Prospectus = varProspectus;
			
			item.TxParameters = varTxParameters;
			
			item.EstimateDescription = varEstimateDescription;
			
			item.SupplementalBlockCount = varSupplementalBlockCount;
			
			item.InteriorsQty = varInteriorsQty;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varPriority,int varJobName,string varEstimateNumber,bool varReadyForEstimating,DateTime? varEstimateDate,string varContact,string varContactEmail,DateTime? varReceived,DateTime? varBidDueDate,int? varEstimator,string varEstimatesDirectory,string varProspectDirectory,DateTime? varResponseRequestedBy,bool varEstimateSent,DateTime? varEstimateSentDate,decimal? varEstimateTotal,decimal? varDoorsTotal,decimal? varInteriorsTotal,decimal? varBunkerTotal,int varStatusID,int varStepID,string varCurrentStatus,string varDoorScope,string varInteriorScope,string varBunkerScope,string varBunkerTitle,string varDesignBasis,string varLaborType,string varPhysicsBasis,string varBunkerClarifications,bool? varDrawings,bool? varProspectus,bool? varTxParameters,string varEstimateDescription,int? varSupplementalBlockCount,int? varInteriorsQty)
		{
			Estimate item = new Estimate();
			
				item.Id = varId;
			
				item.Priority = varPriority;
			
				item.JobName = varJobName;
			
				item.EstimateNumber = varEstimateNumber;
			
				item.ReadyForEstimating = varReadyForEstimating;
			
				item.EstimateDate = varEstimateDate;
			
				item.Contact = varContact;
			
				item.ContactEmail = varContactEmail;
			
				item.Received = varReceived;
			
				item.BidDueDate = varBidDueDate;
			
				item.Estimator = varEstimator;
			
				item.EstimatesDirectory = varEstimatesDirectory;
			
				item.ProspectDirectory = varProspectDirectory;
			
				item.ResponseRequestedBy = varResponseRequestedBy;
			
				item.EstimateSent = varEstimateSent;
			
				item.EstimateSentDate = varEstimateSentDate;
			
				item.EstimateTotal = varEstimateTotal;
			
				item.DoorsTotal = varDoorsTotal;
			
				item.InteriorsTotal = varInteriorsTotal;
			
				item.BunkerTotal = varBunkerTotal;
			
				item.StatusID = varStatusID;
			
				item.StepID = varStepID;
			
				item.CurrentStatus = varCurrentStatus;
			
				item.DoorScope = varDoorScope;
			
				item.InteriorScope = varInteriorScope;
			
				item.BunkerScope = varBunkerScope;
			
				item.BunkerTitle = varBunkerTitle;
			
				item.DesignBasis = varDesignBasis;
			
				item.LaborType = varLaborType;
			
				item.PhysicsBasis = varPhysicsBasis;
			
				item.BunkerClarifications = varBunkerClarifications;
			
				item.Drawings = varDrawings;
			
				item.Prospectus = varProspectus;
			
				item.TxParameters = varTxParameters;
			
				item.EstimateDescription = varEstimateDescription;
			
				item.SupplementalBlockCount = varSupplementalBlockCount;
			
				item.InteriorsQty = varInteriorsQty;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PriorityColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn JobNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateNumberColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ReadyForEstimatingColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactEmailColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ReceivedColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn BidDueDateColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimatorColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimatesDirectoryColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ProspectDirectoryColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ResponseRequestedByColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateSentColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateSentDateColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateTotalColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn DoorsTotalColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn InteriorsTotalColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn BunkerTotalColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusIDColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn StepIDColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrentStatusColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn DoorScopeColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn InteriorScopeColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn BunkerScopeColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn BunkerTitleColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn DesignBasisColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn LaborTypeColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn PhysicsBasisColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn BunkerClarificationsColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn DrawingsColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn ProspectusColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn TxParametersColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateDescriptionColumn
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        public static TableSchema.TableColumn SupplementalBlockCountColumn
        {
            get { return Schema.Columns[35]; }
        }
        
        
        
        public static TableSchema.TableColumn InteriorsQtyColumn
        {
            get { return Schema.Columns[36]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string Priority = @"Priority";
			 public static string JobName = @"JobName";
			 public static string EstimateNumber = @"EstimateNumber";
			 public static string ReadyForEstimating = @"ReadyForEstimating";
			 public static string EstimateDate = @"EstimateDate";
			 public static string Contact = @"Contact";
			 public static string ContactEmail = @"ContactEmail";
			 public static string Received = @"Received";
			 public static string BidDueDate = @"BidDueDate";
			 public static string Estimator = @"Estimator";
			 public static string EstimatesDirectory = @"EstimatesDirectory";
			 public static string ProspectDirectory = @"ProspectDirectory";
			 public static string ResponseRequestedBy = @"ResponseRequestedBy";
			 public static string EstimateSent = @"EstimateSent";
			 public static string EstimateSentDate = @"EstimateSentDate";
			 public static string EstimateTotal = @"EstimateTotal";
			 public static string DoorsTotal = @"DoorsTotal";
			 public static string InteriorsTotal = @"InteriorsTotal";
			 public static string BunkerTotal = @"BunkerTotal";
			 public static string StatusID = @"StatusID";
			 public static string StepID = @"StepID";
			 public static string CurrentStatus = @"CurrentStatus";
			 public static string DoorScope = @"DoorScope";
			 public static string InteriorScope = @"InteriorScope";
			 public static string BunkerScope = @"BunkerScope";
			 public static string BunkerTitle = @"BunkerTitle";
			 public static string DesignBasis = @"DesignBasis";
			 public static string LaborType = @"LaborType";
			 public static string PhysicsBasis = @"PhysicsBasis";
			 public static string BunkerClarifications = @"BunkerClarifications";
			 public static string Drawings = @"Drawings";
			 public static string Prospectus = @"Prospectus";
			 public static string TxParameters = @"TxParameters";
			 public static string EstimateDescription = @"EstimateDescription";
			 public static string SupplementalBlockCount = @"SupplementalBlockCount";
			 public static string InteriorsQty = @"InteriorsQty";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
