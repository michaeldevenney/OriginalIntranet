using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the Project class.
	/// </summary>
    [Serializable]
	public partial class ProjectCollection : ActiveList<Project, ProjectCollection>
	{	   
		public ProjectCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ProjectCollection</returns>
		public ProjectCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Project o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the A_Projects table.
	/// </summary>
	[Serializable]
	public partial class Project : ActiveRecord<Project>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Project()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Project(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Project(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Project(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("A_Projects", TableType.Table, DataService.GetInstance("Internal"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarProjectNumber = new TableSchema.TableColumn(schema);
				colvarProjectNumber.ColumnName = "ProjectNumber";
				colvarProjectNumber.DataType = DbType.AnsiString;
				colvarProjectNumber.MaxLength = 100;
				colvarProjectNumber.AutoIncrement = false;
				colvarProjectNumber.IsNullable = false;
				colvarProjectNumber.IsPrimaryKey = false;
				colvarProjectNumber.IsForeignKey = false;
				colvarProjectNumber.IsReadOnly = false;
				colvarProjectNumber.DefaultSetting = @"";
				colvarProjectNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjectNumber);
				
				TableSchema.TableColumn colvarProjectName = new TableSchema.TableColumn(schema);
				colvarProjectName.ColumnName = "ProjectName";
				colvarProjectName.DataType = DbType.AnsiString;
				colvarProjectName.MaxLength = 100;
				colvarProjectName.AutoIncrement = false;
				colvarProjectName.IsNullable = false;
				colvarProjectName.IsPrimaryKey = false;
				colvarProjectName.IsForeignKey = false;
				colvarProjectName.IsReadOnly = false;
				colvarProjectName.DefaultSetting = @"";
				colvarProjectName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjectName);
				
				TableSchema.TableColumn colvarHospitalClinicName = new TableSchema.TableColumn(schema);
				colvarHospitalClinicName.ColumnName = "HospitalClinicName";
				colvarHospitalClinicName.DataType = DbType.AnsiString;
				colvarHospitalClinicName.MaxLength = 1000;
				colvarHospitalClinicName.AutoIncrement = false;
				colvarHospitalClinicName.IsNullable = true;
				colvarHospitalClinicName.IsPrimaryKey = false;
				colvarHospitalClinicName.IsForeignKey = false;
				colvarHospitalClinicName.IsReadOnly = false;
				colvarHospitalClinicName.DefaultSetting = @"";
				colvarHospitalClinicName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHospitalClinicName);
				
				TableSchema.TableColumn colvarProjectLead = new TableSchema.TableColumn(schema);
				colvarProjectLead.ColumnName = "ProjectLead";
				colvarProjectLead.DataType = DbType.AnsiString;
				colvarProjectLead.MaxLength = 10;
				colvarProjectLead.AutoIncrement = false;
				colvarProjectLead.IsNullable = true;
				colvarProjectLead.IsPrimaryKey = false;
				colvarProjectLead.IsForeignKey = false;
				colvarProjectLead.IsReadOnly = false;
				colvarProjectLead.DefaultSetting = @"";
				colvarProjectLead.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjectLead);
				
				TableSchema.TableColumn colvarProjectType = new TableSchema.TableColumn(schema);
				colvarProjectType.ColumnName = "ProjectType";
				colvarProjectType.DataType = DbType.AnsiString;
				colvarProjectType.MaxLength = 25;
				colvarProjectType.AutoIncrement = false;
				colvarProjectType.IsNullable = true;
				colvarProjectType.IsPrimaryKey = false;
				colvarProjectType.IsForeignKey = false;
				colvarProjectType.IsReadOnly = false;
				colvarProjectType.DefaultSetting = @"";
				colvarProjectType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjectType);
				
				TableSchema.TableColumn colvarProjectPhase = new TableSchema.TableColumn(schema);
				colvarProjectPhase.ColumnName = "ProjectPhase";
				colvarProjectPhase.DataType = DbType.AnsiString;
				colvarProjectPhase.MaxLength = 15;
				colvarProjectPhase.AutoIncrement = false;
				colvarProjectPhase.IsNullable = true;
				colvarProjectPhase.IsPrimaryKey = false;
				colvarProjectPhase.IsForeignKey = false;
				colvarProjectPhase.IsReadOnly = false;
				colvarProjectPhase.DefaultSetting = @"";
				colvarProjectPhase.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjectPhase);
				
				TableSchema.TableColumn colvarProjectActivity = new TableSchema.TableColumn(schema);
				colvarProjectActivity.ColumnName = "ProjectActivity";
				colvarProjectActivity.DataType = DbType.AnsiString;
				colvarProjectActivity.MaxLength = 25;
				colvarProjectActivity.AutoIncrement = false;
				colvarProjectActivity.IsNullable = true;
				colvarProjectActivity.IsPrimaryKey = false;
				colvarProjectActivity.IsForeignKey = false;
				colvarProjectActivity.IsReadOnly = false;
				colvarProjectActivity.DefaultSetting = @"";
				colvarProjectActivity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjectActivity);
				
				TableSchema.TableColumn colvarLocation = new TableSchema.TableColumn(schema);
				colvarLocation.ColumnName = "Location";
				colvarLocation.DataType = DbType.AnsiString;
				colvarLocation.MaxLength = 50;
				colvarLocation.AutoIncrement = false;
				colvarLocation.IsNullable = true;
				colvarLocation.IsPrimaryKey = false;
				colvarLocation.IsForeignKey = false;
				colvarLocation.IsReadOnly = false;
				colvarLocation.DefaultSetting = @"";
				colvarLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocation);
				
				TableSchema.TableColumn colvarPMUserID = new TableSchema.TableColumn(schema);
				colvarPMUserID.ColumnName = "PMUserID";
				colvarPMUserID.DataType = DbType.Int32;
				colvarPMUserID.MaxLength = 0;
				colvarPMUserID.AutoIncrement = false;
				colvarPMUserID.IsNullable = true;
				colvarPMUserID.IsPrimaryKey = false;
				colvarPMUserID.IsForeignKey = false;
				colvarPMUserID.IsReadOnly = false;
				colvarPMUserID.DefaultSetting = @"";
				colvarPMUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPMUserID);
				
				TableSchema.TableColumn colvarSalespersonID = new TableSchema.TableColumn(schema);
				colvarSalespersonID.ColumnName = "SalespersonID";
				colvarSalespersonID.DataType = DbType.Int32;
				colvarSalespersonID.MaxLength = 0;
				colvarSalespersonID.AutoIncrement = false;
				colvarSalespersonID.IsNullable = true;
				colvarSalespersonID.IsPrimaryKey = false;
				colvarSalespersonID.IsForeignKey = false;
				colvarSalespersonID.IsReadOnly = false;
				colvarSalespersonID.DefaultSetting = @"";
				colvarSalespersonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalespersonID);
				
				TableSchema.TableColumn colvarPMAssigned = new TableSchema.TableColumn(schema);
				colvarPMAssigned.ColumnName = "PMAssigned";
				colvarPMAssigned.DataType = DbType.AnsiString;
				colvarPMAssigned.MaxLength = 50;
				colvarPMAssigned.AutoIncrement = false;
				colvarPMAssigned.IsNullable = true;
				colvarPMAssigned.IsPrimaryKey = false;
				colvarPMAssigned.IsForeignKey = false;
				colvarPMAssigned.IsReadOnly = false;
				colvarPMAssigned.DefaultSetting = @"";
				colvarPMAssigned.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPMAssigned);
				
				TableSchema.TableColumn colvarDirectoryPath = new TableSchema.TableColumn(schema);
				colvarDirectoryPath.ColumnName = "DirectoryPath";
				colvarDirectoryPath.DataType = DbType.AnsiString;
				colvarDirectoryPath.MaxLength = -1;
				colvarDirectoryPath.AutoIncrement = false;
				colvarDirectoryPath.IsNullable = true;
				colvarDirectoryPath.IsPrimaryKey = false;
				colvarDirectoryPath.IsForeignKey = false;
				colvarDirectoryPath.IsReadOnly = false;
				colvarDirectoryPath.DefaultSetting = @"";
				colvarDirectoryPath.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDirectoryPath);
				
				TableSchema.TableColumn colvarDirectoryPathExec = new TableSchema.TableColumn(schema);
				colvarDirectoryPathExec.ColumnName = "DirectoryPathExec";
				colvarDirectoryPathExec.DataType = DbType.AnsiString;
				colvarDirectoryPathExec.MaxLength = -1;
				colvarDirectoryPathExec.AutoIncrement = false;
				colvarDirectoryPathExec.IsNullable = true;
				colvarDirectoryPathExec.IsPrimaryKey = false;
				colvarDirectoryPathExec.IsForeignKey = false;
				colvarDirectoryPathExec.IsReadOnly = false;
				colvarDirectoryPathExec.DefaultSetting = @"";
				colvarDirectoryPathExec.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDirectoryPathExec);
				
				TableSchema.TableColumn colvarCreated = new TableSchema.TableColumn(schema);
				colvarCreated.ColumnName = "Created";
				colvarCreated.DataType = DbType.DateTime;
				colvarCreated.MaxLength = 0;
				colvarCreated.AutoIncrement = false;
				colvarCreated.IsNullable = true;
				colvarCreated.IsPrimaryKey = false;
				colvarCreated.IsForeignKey = false;
				colvarCreated.IsReadOnly = false;
				colvarCreated.DefaultSetting = @"";
				colvarCreated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreated);
				
				TableSchema.TableColumn colvarWallDiagramFile = new TableSchema.TableColumn(schema);
				colvarWallDiagramFile.ColumnName = "WallDiagramFile";
				colvarWallDiagramFile.DataType = DbType.AnsiString;
				colvarWallDiagramFile.MaxLength = 100;
				colvarWallDiagramFile.AutoIncrement = false;
				colvarWallDiagramFile.IsNullable = true;
				colvarWallDiagramFile.IsPrimaryKey = false;
				colvarWallDiagramFile.IsForeignKey = false;
				colvarWallDiagramFile.IsReadOnly = false;
				colvarWallDiagramFile.DefaultSetting = @"";
				colvarWallDiagramFile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWallDiagramFile);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarUpdatedBy = new TableSchema.TableColumn(schema);
				colvarUpdatedBy.ColumnName = "UpdatedBy";
				colvarUpdatedBy.DataType = DbType.AnsiString;
				colvarUpdatedBy.MaxLength = 50;
				colvarUpdatedBy.AutoIncrement = false;
				colvarUpdatedBy.IsNullable = true;
				colvarUpdatedBy.IsPrimaryKey = false;
				colvarUpdatedBy.IsForeignKey = false;
				colvarUpdatedBy.IsReadOnly = false;
				colvarUpdatedBy.DefaultSetting = @"";
				colvarUpdatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedBy);
				
				TableSchema.TableColumn colvarUpdated = new TableSchema.TableColumn(schema);
				colvarUpdated.ColumnName = "Updated";
				colvarUpdated.DataType = DbType.DateTime;
				colvarUpdated.MaxLength = 0;
				colvarUpdated.AutoIncrement = false;
				colvarUpdated.IsNullable = true;
				colvarUpdated.IsPrimaryKey = false;
				colvarUpdated.IsForeignKey = false;
				colvarUpdated.IsReadOnly = false;
				colvarUpdated.DefaultSetting = @"";
				colvarUpdated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdated);
				
				TableSchema.TableColumn colvarRegion = new TableSchema.TableColumn(schema);
				colvarRegion.ColumnName = "Region";
				colvarRegion.DataType = DbType.AnsiString;
				colvarRegion.MaxLength = 50;
				colvarRegion.AutoIncrement = false;
				colvarRegion.IsNullable = true;
				colvarRegion.IsPrimaryKey = false;
				colvarRegion.IsForeignKey = false;
				colvarRegion.IsReadOnly = false;
				colvarRegion.DefaultSetting = @"";
				colvarRegion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegion);
				
				TableSchema.TableColumn colvarDesignDraftsmanID = new TableSchema.TableColumn(schema);
				colvarDesignDraftsmanID.ColumnName = "DesignDraftsmanID";
				colvarDesignDraftsmanID.DataType = DbType.Int32;
				colvarDesignDraftsmanID.MaxLength = 0;
				colvarDesignDraftsmanID.AutoIncrement = false;
				colvarDesignDraftsmanID.IsNullable = true;
				colvarDesignDraftsmanID.IsPrimaryKey = false;
				colvarDesignDraftsmanID.IsForeignKey = false;
				colvarDesignDraftsmanID.IsReadOnly = false;
				
						colvarDesignDraftsmanID.DefaultSetting = @"((128))";
				colvarDesignDraftsmanID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesignDraftsmanID);
				
				TableSchema.TableColumn colvarEngineeringConsultant = new TableSchema.TableColumn(schema);
				colvarEngineeringConsultant.ColumnName = "EngineeringConsultant";
				colvarEngineeringConsultant.DataType = DbType.AnsiString;
				colvarEngineeringConsultant.MaxLength = 100;
				colvarEngineeringConsultant.AutoIncrement = false;
				colvarEngineeringConsultant.IsNullable = true;
				colvarEngineeringConsultant.IsPrimaryKey = false;
				colvarEngineeringConsultant.IsForeignKey = false;
				colvarEngineeringConsultant.IsReadOnly = false;
				
						colvarEngineeringConsultant.DefaultSetting = @"('Unassigned')";
				colvarEngineeringConsultant.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEngineeringConsultant);
				
				TableSchema.TableColumn colvarPhysicistID = new TableSchema.TableColumn(schema);
				colvarPhysicistID.ColumnName = "PhysicistID";
				colvarPhysicistID.DataType = DbType.Int32;
				colvarPhysicistID.MaxLength = 0;
				colvarPhysicistID.AutoIncrement = false;
				colvarPhysicistID.IsNullable = true;
				colvarPhysicistID.IsPrimaryKey = false;
				colvarPhysicistID.IsForeignKey = false;
				colvarPhysicistID.IsReadOnly = false;
				colvarPhysicistID.DefaultSetting = @"";
				colvarPhysicistID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhysicistID);
				
				TableSchema.TableColumn colvarAcceptedEstimateID = new TableSchema.TableColumn(schema);
				colvarAcceptedEstimateID.ColumnName = "AcceptedEstimateID";
				colvarAcceptedEstimateID.DataType = DbType.Int32;
				colvarAcceptedEstimateID.MaxLength = 0;
				colvarAcceptedEstimateID.AutoIncrement = false;
				colvarAcceptedEstimateID.IsNullable = true;
				colvarAcceptedEstimateID.IsPrimaryKey = false;
				colvarAcceptedEstimateID.IsForeignKey = false;
				colvarAcceptedEstimateID.IsReadOnly = false;
				colvarAcceptedEstimateID.DefaultSetting = @"";
				colvarAcceptedEstimateID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAcceptedEstimateID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Internal"].AddSchema("A_Projects",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("ProjectNumber")]
		[Bindable(true)]
		public string ProjectNumber 
		{
			get { return GetColumnValue<string>(Columns.ProjectNumber); }
			set { SetColumnValue(Columns.ProjectNumber, value); }
		}
		  
		[XmlAttribute("ProjectName")]
		[Bindable(true)]
		public string ProjectName 
		{
			get { return GetColumnValue<string>(Columns.ProjectName); }
			set { SetColumnValue(Columns.ProjectName, value); }
		}
		  
		[XmlAttribute("HospitalClinicName")]
		[Bindable(true)]
		public string HospitalClinicName 
		{
			get { return GetColumnValue<string>(Columns.HospitalClinicName); }
			set { SetColumnValue(Columns.HospitalClinicName, value); }
		}
		  
		[XmlAttribute("ProjectLead")]
		[Bindable(true)]
		public string ProjectLead 
		{
			get { return GetColumnValue<string>(Columns.ProjectLead); }
			set { SetColumnValue(Columns.ProjectLead, value); }
		}
		  
		[XmlAttribute("ProjectType")]
		[Bindable(true)]
		public string ProjectType 
		{
			get { return GetColumnValue<string>(Columns.ProjectType); }
			set { SetColumnValue(Columns.ProjectType, value); }
		}
		  
		[XmlAttribute("ProjectPhase")]
		[Bindable(true)]
		public string ProjectPhase 
		{
			get { return GetColumnValue<string>(Columns.ProjectPhase); }
			set { SetColumnValue(Columns.ProjectPhase, value); }
		}
		  
		[XmlAttribute("ProjectActivity")]
		[Bindable(true)]
		public string ProjectActivity 
		{
			get { return GetColumnValue<string>(Columns.ProjectActivity); }
			set { SetColumnValue(Columns.ProjectActivity, value); }
		}
		  
		[XmlAttribute("Location")]
		[Bindable(true)]
		public string Location 
		{
			get { return GetColumnValue<string>(Columns.Location); }
			set { SetColumnValue(Columns.Location, value); }
		}
		  
		[XmlAttribute("PMUserID")]
		[Bindable(true)]
		public int? PMUserID 
		{
			get { return GetColumnValue<int?>(Columns.PMUserID); }
			set { SetColumnValue(Columns.PMUserID, value); }
		}
		  
		[XmlAttribute("SalespersonID")]
		[Bindable(true)]
		public int? SalespersonID 
		{
			get { return GetColumnValue<int?>(Columns.SalespersonID); }
			set { SetColumnValue(Columns.SalespersonID, value); }
		}
		  
		[XmlAttribute("PMAssigned")]
		[Bindable(true)]
		public string PMAssigned 
		{
			get { return GetColumnValue<string>(Columns.PMAssigned); }
			set { SetColumnValue(Columns.PMAssigned, value); }
		}
		  
		[XmlAttribute("DirectoryPath")]
		[Bindable(true)]
		public string DirectoryPath 
		{
			get { return GetColumnValue<string>(Columns.DirectoryPath); }
			set { SetColumnValue(Columns.DirectoryPath, value); }
		}
		  
		[XmlAttribute("DirectoryPathExec")]
		[Bindable(true)]
		public string DirectoryPathExec 
		{
			get { return GetColumnValue<string>(Columns.DirectoryPathExec); }
			set { SetColumnValue(Columns.DirectoryPathExec, value); }
		}
		  
		[XmlAttribute("Created")]
		[Bindable(true)]
		public DateTime? Created 
		{
			get { return GetColumnValue<DateTime?>(Columns.Created); }
			set { SetColumnValue(Columns.Created, value); }
		}
		  
		[XmlAttribute("WallDiagramFile")]
		[Bindable(true)]
		public string WallDiagramFile 
		{
			get { return GetColumnValue<string>(Columns.WallDiagramFile); }
			set { SetColumnValue(Columns.WallDiagramFile, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("UpdatedBy")]
		[Bindable(true)]
		public string UpdatedBy 
		{
			get { return GetColumnValue<string>(Columns.UpdatedBy); }
			set { SetColumnValue(Columns.UpdatedBy, value); }
		}
		  
		[XmlAttribute("Updated")]
		[Bindable(true)]
		public DateTime? Updated 
		{
			get { return GetColumnValue<DateTime?>(Columns.Updated); }
			set { SetColumnValue(Columns.Updated, value); }
		}
		  
		[XmlAttribute("Region")]
		[Bindable(true)]
		public string Region 
		{
			get { return GetColumnValue<string>(Columns.Region); }
			set { SetColumnValue(Columns.Region, value); }
		}
		  
		[XmlAttribute("DesignDraftsmanID")]
		[Bindable(true)]
		public int? DesignDraftsmanID 
		{
			get { return GetColumnValue<int?>(Columns.DesignDraftsmanID); }
			set { SetColumnValue(Columns.DesignDraftsmanID, value); }
		}
		  
		[XmlAttribute("EngineeringConsultant")]
		[Bindable(true)]
		public string EngineeringConsultant 
		{
			get { return GetColumnValue<string>(Columns.EngineeringConsultant); }
			set { SetColumnValue(Columns.EngineeringConsultant, value); }
		}
		  
		[XmlAttribute("PhysicistID")]
		[Bindable(true)]
		public int? PhysicistID 
		{
			get { return GetColumnValue<int?>(Columns.PhysicistID); }
			set { SetColumnValue(Columns.PhysicistID, value); }
		}
		  
		[XmlAttribute("AcceptedEstimateID")]
		[Bindable(true)]
		public int? AcceptedEstimateID 
		{
			get { return GetColumnValue<int?>(Columns.AcceptedEstimateID); }
			set { SetColumnValue(Columns.AcceptedEstimateID, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varProjectNumber,string varProjectName,string varHospitalClinicName,string varProjectLead,string varProjectType,string varProjectPhase,string varProjectActivity,string varLocation,int? varPMUserID,int? varSalespersonID,string varPMAssigned,string varDirectoryPath,string varDirectoryPathExec,DateTime? varCreated,string varWallDiagramFile,string varCreatedBy,string varUpdatedBy,DateTime? varUpdated,string varRegion,int? varDesignDraftsmanID,string varEngineeringConsultant,int? varPhysicistID,int? varAcceptedEstimateID)
		{
			Project item = new Project();
			
			item.ProjectNumber = varProjectNumber;
			
			item.ProjectName = varProjectName;
			
			item.HospitalClinicName = varHospitalClinicName;
			
			item.ProjectLead = varProjectLead;
			
			item.ProjectType = varProjectType;
			
			item.ProjectPhase = varProjectPhase;
			
			item.ProjectActivity = varProjectActivity;
			
			item.Location = varLocation;
			
			item.PMUserID = varPMUserID;
			
			item.SalespersonID = varSalespersonID;
			
			item.PMAssigned = varPMAssigned;
			
			item.DirectoryPath = varDirectoryPath;
			
			item.DirectoryPathExec = varDirectoryPathExec;
			
			item.Created = varCreated;
			
			item.WallDiagramFile = varWallDiagramFile;
			
			item.CreatedBy = varCreatedBy;
			
			item.UpdatedBy = varUpdatedBy;
			
			item.Updated = varUpdated;
			
			item.Region = varRegion;
			
			item.DesignDraftsmanID = varDesignDraftsmanID;
			
			item.EngineeringConsultant = varEngineeringConsultant;
			
			item.PhysicistID = varPhysicistID;
			
			item.AcceptedEstimateID = varAcceptedEstimateID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varProjectNumber,string varProjectName,string varHospitalClinicName,string varProjectLead,string varProjectType,string varProjectPhase,string varProjectActivity,string varLocation,int? varPMUserID,int? varSalespersonID,string varPMAssigned,string varDirectoryPath,string varDirectoryPathExec,DateTime? varCreated,string varWallDiagramFile,string varCreatedBy,string varUpdatedBy,DateTime? varUpdated,string varRegion,int? varDesignDraftsmanID,string varEngineeringConsultant,int? varPhysicistID,int? varAcceptedEstimateID)
		{
			Project item = new Project();
			
				item.Id = varId;
			
				item.ProjectNumber = varProjectNumber;
			
				item.ProjectName = varProjectName;
			
				item.HospitalClinicName = varHospitalClinicName;
			
				item.ProjectLead = varProjectLead;
			
				item.ProjectType = varProjectType;
			
				item.ProjectPhase = varProjectPhase;
			
				item.ProjectActivity = varProjectActivity;
			
				item.Location = varLocation;
			
				item.PMUserID = varPMUserID;
			
				item.SalespersonID = varSalespersonID;
			
				item.PMAssigned = varPMAssigned;
			
				item.DirectoryPath = varDirectoryPath;
			
				item.DirectoryPathExec = varDirectoryPathExec;
			
				item.Created = varCreated;
			
				item.WallDiagramFile = varWallDiagramFile;
			
				item.CreatedBy = varCreatedBy;
			
				item.UpdatedBy = varUpdatedBy;
			
				item.Updated = varUpdated;
			
				item.Region = varRegion;
			
				item.DesignDraftsmanID = varDesignDraftsmanID;
			
				item.EngineeringConsultant = varEngineeringConsultant;
			
				item.PhysicistID = varPhysicistID;
			
				item.AcceptedEstimateID = varAcceptedEstimateID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectNumberColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn HospitalClinicNameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectLeadColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectTypeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectPhaseColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectActivityColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn LocationColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PMUserIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn SalespersonIDColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn PMAssignedColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn DirectoryPathColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn DirectoryPathExecColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn WallDiagramFileColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedByColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn RegionColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn DesignDraftsmanIDColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn EngineeringConsultantColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn PhysicistIDColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn AcceptedEstimateIDColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string ProjectNumber = @"ProjectNumber";
			 public static string ProjectName = @"ProjectName";
			 public static string HospitalClinicName = @"HospitalClinicName";
			 public static string ProjectLead = @"ProjectLead";
			 public static string ProjectType = @"ProjectType";
			 public static string ProjectPhase = @"ProjectPhase";
			 public static string ProjectActivity = @"ProjectActivity";
			 public static string Location = @"Location";
			 public static string PMUserID = @"PMUserID";
			 public static string SalespersonID = @"SalespersonID";
			 public static string PMAssigned = @"PMAssigned";
			 public static string DirectoryPath = @"DirectoryPath";
			 public static string DirectoryPathExec = @"DirectoryPathExec";
			 public static string Created = @"Created";
			 public static string WallDiagramFile = @"WallDiagramFile";
			 public static string CreatedBy = @"CreatedBy";
			 public static string UpdatedBy = @"UpdatedBy";
			 public static string Updated = @"Updated";
			 public static string Region = @"Region";
			 public static string DesignDraftsmanID = @"DesignDraftsmanID";
			 public static string EngineeringConsultant = @"EngineeringConsultant";
			 public static string PhysicistID = @"PhysicistID";
			 public static string AcceptedEstimateID = @"AcceptedEstimateID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
